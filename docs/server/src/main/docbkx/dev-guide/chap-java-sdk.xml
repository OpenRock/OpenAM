<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS.
  !
-->
<chapter xml:id='chap-sdk'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Using the OpenAM Java SDK</title>

 <para>This chapter introduces OpenAM Java SDK. OpenAM Java SDK is delivered
  with the full version of OpenAM,
  <filename><?eval ${coreDirectoryFile}?></filename>.</para>

 <section xml:id="install-sdk-samples">
  <title>Installing OpenAM Client SDK Samples</title>
  <indexterm>
   <primary>Installing</primary>
   <secondary>Java SDK samples</secondary>
  </indexterm>

  <para>The full OpenAM download,
   <filename><?eval ${coreDirectoryFile}?></filename>, contains the Java Client
   SDK library, <filename><?eval ${clientsdkJarFile}?></filename>, as well as
   samples for use on the command line in
   <filename><?eval ${clientSDKExamplesCliFile}?></filename>, and samples in a
   web application, <filename><?eval ${clientSDKExamplesWarFile}?></filename>.
   The <link xlink:href="${javadocBase}" xlink:show="new"><citetitle>OpenAM Java
    SDK API Specification</citetitle></link> provides a reference to the public
   APIs.</para>

  <procedure xml:id="deploy-client-sdk-war">
   <title>To Deploy the Sample Web Application</title>

   <para>The sample web application deploys in your container to show you
    the client SDK samples in action.</para>

   <step>
    <para>Deploy the .war in your Java web application container such as
     Apache Tomcat or JBoss.</para>

    <screen>
     $ <userinput>cp ${clientSDKExamplesWarFile} /path/to/tomcat/webapps/client.war</userinput>
    </screen>
   </step>

   <step>
    <para>
     If you have run this procedure before, make sure to deploy a fresh
     copy of the .war file to a different location, such as
     <filename>/path/to/tomcat/webapps/client1.war</filename>
    </para>
   </step>

   <step>
    <para>Browse to the location where you deployed the client, and configure
     the application to access OpenAM using the application user name,
     <literal>UrlAccessAgent</literal>, and password configured when you set up
     OpenAM.</para>

    <mediaobject xml:id="figure-config-client-sdk-war">
     <alt>Sample web app configuration screen</alt>
     <imageobject>
      <imagedata fileref="images/config-client-sdk-war.png" format="PNG" />
     </imageobject>
     <textobject><para>The sample web application configuration screen lets you
      configure access to OpenAM.</para></textobject>
    </mediaobject>

    <variablelist>
     <para>Use the following hints to complete the configuration.</para>
     <varlistentry>
      <term>Server Protocol</term>
      <listitem>
       <para>Protocol to access OpenAM (<literal>http</literal> or
        <literal>https</literal>)</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Server Host</term>
      <listitem>
       <para>Fully qualified domain name for OpenAM, such as
        <literal>openam.example.com</literal></para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Server Port</term>
      <listitem>
       <para>OpenAM port number such as 8080 or 8443</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Server Deployment URI</term>
      <listitem>
       <para>URI entry point to OpenAM such as <literal>/openam</literal></para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Debug directory</term>
      <listitem>
       <para>Where to write the debug messages for the client samples</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Application user name</term>
      <listitem>
       <para>An user agent configured to access OpenAM, such as
        <literal>UrlAccessAgent</literal> set up when OpenAM was installed</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Application user password</term>
      <listitem>
       <para>The user agent password</para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>The sample client writes configuration information under
     <filename>$HOME/OpenAMClient/</filename>, where $HOME is that of the user
     running the web application container.</para>
   </step>

   <step>
    <para>Verify that you have properly configured the sample web application.</para>

    <substeps>
     <step>
      <para>In another browser tab page of the same browser instance, login to
       OpenAM as the OpenAM Administrator, <literal>amadmin</literal>.</para>
      <para>This signs you into OpenAM, storing the cookie in your browser.</para>
     </step>

     <step>
      <para>On the Samples tab page, click the link under Single Sign On Token
       Verification Servlet.</para>

      <para>If the sample web application is properly configured, you should
       see something like the following text in your browser.</para>

      <programlisting language="none">SSOToken host name: 127.0.0.1
       SSOToken Principal name: id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org
       Authentication type used: DataStore
       IPAddress of the host: 127.0.0.1
       SSO Token validation test succeeded
       The token id is AQIC5...CMDEAAlNLABQtODY0Mjc5MDUwNDQzOTA2MzYxNg..*
       ...
       User Attributes: {... givenName=[amAdmin], ...roles=[Top-level Admin Role], ...}</programlisting>
     </step>
    </substeps>
   </step>
  </procedure>

  <procedure xml:id="build-cli-samples">
   <title>To Build the Command-Line Sample Applications</title>

   <para>Follow these steps to set up the command-line examples.</para>

   <step>
    <para>Unpack the sample applications and related libraries.</para>

    <screen>
     $ <userinput>mkdir sdk &amp;&amp; cd sdk</userinput>
     $ <userinput>unzip ~/Downloads/${clientSDKExamplesCliFile}</userinput>
    </screen>
   </step>

   <step>
    <para>Configure the samples to access OpenAM.</para>

    <screen>
     $ <userinput>sh scripts/setup.sh</userinput>
     <computeroutput>Debug directory (make sure this directory exists):</computeroutput> <userinput>/Users/me/openam/openam/debug</userinput>
     <computeroutput>Application user (e.g. URLAccessAgent) password:</computeroutput> <userinput>secret12</userinput>
     <computeroutput>Protocol of the server:</computeroutput> <userinput>http</userinput>
     <computeroutput>Host name of the server:</computeroutput> <userinput>openam.example.com</userinput>
     <computeroutput>Port of the server:</computeroutput> <userinput>8080</userinput>
     <computeroutput>Server's deployment URI:</computeroutput> <userinput>openam</userinput>
     <computeroutput>Naming URL (hit enter to accept default value,
      http://openam.example.com:8080/openam/namingservice):</computeroutput>
     $</screen>
   </step>

   <step>
    <para>Verify that you have properly configured the samples.</para>

    <screen>
     $ <userinput>sh scripts/Login.sh</userinput>
     <computeroutput>Realm (e.g. /):</computeroutput> <userinput>/</userinput>
     <computeroutput>Login module name (e.g. DataStore or LDAP):</computeroutput> <userinput>DataStore</userinput>
     <computeroutput>Login locale (e.g. en_US or fr_FR):</computeroutput> <userinput>fr_FR</userinput>
     <computeroutput>DataStore: Obtained login context</computeroutput>
     <computeroutput>Nom d'utilisateur :</computeroutput><userinput>demo</userinput>
     <computeroutput>Mot de passe :</computeroutput><userinput>changeit</userinput>
     <computeroutput>Login succeeded.
      Logged Out!!</computeroutput></screen>
   </step>
  </procedure>
 </section>

 <section xml:id="about-sdk">
  <title>About the OpenAM Java SDK</title>
  <itemizedlist>
   <para>After installing the Java SDK command line samples, you see the
    following content.</para>

   <listitem>
    <para><filename>lib/</filename>: SDK and other libraries</para>
   </listitem>
   <listitem>
    <para><filename>resources/</filename>: properties configuration files for
     the SDK and samples</para>
   </listitem>
   <listitem>
    <para><filename>scripts/</filename>: scripts to run the samples</para>
   </listitem>
   <listitem>
    <para><filename>source/</filename>: sample code</para>
   </listitem>
  </itemizedlist>

  <para>After deploying the Java SDK web application archive, you find the
   following content where the .war file was unpacked.</para>

  <itemizedlist>
   <listitem>
    <para><filename>META-INF/</filename>: build information</para>
   </listitem>
   <listitem>
    <para><filename>WEB-INF/</filename>: sample classes and libraries</para>
   </listitem>
   <listitem>
    <para><filename>console/</filename>: images for sample UI</para>
   </listitem>
   <listitem>
    <para><filename>index.html</filename>: sample home page</para>
   </listitem>
   <listitem>
    <para><filename>keystore.jks</filename>: OpenAM test certificate, alias:
     <literal>test</literal>, key store password: <literal>changeit</literal></para>
   </listitem>
   <listitem>
    <para><filename>policy/</filename>: Policy Evaluator Client Sample page</para>
   </listitem>
   <listitem>
    <para><filename>saml2/</filename>: Secure Attribute Exchange example</para>
   </listitem>
   <listitem>
    <para><filename>sample.css</filename>: sample styles</para>
   </listitem>
   <listitem>
    <para><filename>sm/</filename>: Service Configuration sample</para>
   </listitem>
   <listitem>
    <para><filename>um/</filename>: User Profile sample</para>
   </listitem>
  </itemizedlist>

  <itemizedlist xml:id="sdk-shutdown-hooks">
   <title>Registering Your Java SDK Client to Shut Down Gracefully</title>

   <para>When writing a client using the OpenAM Java SDK, make sure you register
    hooks to make sure the application can be shut down gracefully. How you
    register for shutdown depends on the type of application.</para>

   <listitem>
    <para>For Java EE applications, make sure the OpenAM client SDK shuts down
     successfully by including the following context listener in your
     application's <filename>web.xml</filename> file.</para>

    <programlisting language="xml">&lt;listener&gt;
     &lt;listener-class&gt;
     com.sun.identity.common.ShutdownServletContextListener
     &lt;/listener-class&gt;
     &lt;/listener&gt;</programlisting>
   </listitem>

   <listitem>
    <para>For standalone applications, set the following JVM property.</para>

    <literallayout class="monospaced"
     >-Dopenam.runtime.shutdown.hook.enabled=true</literallayout>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="encoding-pwds">
  <title>Encoding Passwords and Password Reset Questions and Answers</title>
  <para>
   OpenAM uses symmetric encryption algorithms to encrypt and decrypt stored
   passwords, so that
   they can be retrieved or modified at later date if necessary.
   OpenAM Java SDK provides the capability to encode passwords
   using the <literal>EncodeAction</literal>
   class in standalone applications. For example, you can encrypt and decrypt a
   password as follows:
  </para>
  <programlisting language="java">String plainText = "helloworld";
String encrypted = AccessController.doPrivileged(new EncodeAction(plainText));
String decrypted = AccessController.doPrivileged(new DecodeAction(encrypted));
assert plainText.equals(decrypted);</programlisting>
  <para>
   To use this class,
   you must ensure that the symmetric encryption
   key has the same value as configured in the server instances.
   You can
   run <literal>ssoadm</literal> to retrieve the
   password encryption key as follows:
  </para>
  <screen>
ssoadm am.encryption.pwd
  </screen>
  <para>
   Next, in your application's <literal>AMConfig.properties</literal> file, replace
   the <literal>@ENCRYPTION_KEY@</literal> with the value of the password
   encryption key.
   The property ensures that OpenAM can decrypt the
   password.
  </para>
  <screen>
am.encryption.pwd=@ENCRYPTION_KEY@
  </screen>

  <para>
   OpenAM's password reset question and answer also uses symmetric key encryption
   in its configuration.
   You can use
   the <literal>encodeAction</literal> class to encrypt a password reset question
   and answer:
  </para>
  <programlisting>
String encrypted = AccessController.doPrivileged(new EncodeAction(question + "\t" + \
   answer "+" "1"));
  </programlisting>

   <para>The last number in the previous example indicates whether the question/answer is
    enabled or disabled:</para>
   <itemizedlist>
    <listitem><para>0 = default question/answer that is disabled</para></listitem>
    <listitem><para>1 = default question/answer that is enabled</para></listitem>
    <listitem><para>2 = personal question/answer that is disabled</para></listitem>
    <listitem><para>3 = personal question/answer that is enabled</para></listitem>
   </itemizedlist>

  <para>
   To encrypt or decrypt password reset question and answer, you must
   retrieve the password encryption key using <literal>ssoadm am.encryption.key</literal>,
   and then set
   the <literal>am.encryption.key</literal> property with the value of
   the password encryption key
   in the <literal>AMConfig.properties</literal> file.
  </para>

  <para>
   For additional information,
   see <link xlink:href="${javadocBase}/index.html?com/sun/identity/security/EncodeAction.html"
             xlink:show="new"
             xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>EncodeAction</citetitle></link>.
  </para>
 </section>
</chapter>
