<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS.
  !    
-->
<section xml:id='sec-rest-authz-policy'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                             http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'
         xmlns:xinclude='http://www.w3.org/2001/XInclude'>

 <title>RESTful Authorization and Policy Management Services</title>

 <indexterm><primary>REST API</primary></indexterm>

 <para>This section shows how to use the OpenAM RESTful interfaces for
  authorization and policy management.
 </para>

 <section xml:id="rest-api-authz">
  <title>About the REST Policy Endpoints</title>
  <indexterm>
   <primary>Policy</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>
   OpenAM provides REST APIs both for requesting policy decisions,
   and also for administering policy definitions.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Under <literal>/json[/<replaceable>realm</replaceable>]/policies</literal>,
     you find the newer JSON-based APIs for policy management and evaluation.
    </para>
   </listitem>
   <listitem>
    <para>
     Under
     <literal>/json[/<replaceable>realm</replaceable>]/applications</literal>
     and <literal>/json/applicationtypes</literal>
     you find JSON-based APIs
     for administering applications and reading application types.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/conditiontypes</literal> you find a JSON-based API
     for viewing what types of conditions you can use when defining policies.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/subjecttypes</literal> you find a JSON-based API
     for viewing what types of subjects you can use when defining policies.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/subjectattributes</literal> you find a JSON-based API
     for viewing subjects' attributes you can use when defining response
     attributes in policies.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/decisioncombiners</literal> you find a JSON-based API
     for viewing implementations you can use when defining policies
     to specify how to combine results when multiple policies apply.
    </para>
   </listitem>
     <listitem>
    <para>
     Under <literal>/json[/<replaceable>realm</replaceable>]/referrals</literal>
     you find a JSON-based API for managing policy referrals.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/identity/authorize</literal>
     and <literal>/ws/1/entitlement/</literal>,
     you find the backwards-compatible, legacy APIs.
     See <xref linkend="rest-api-authz-legacy" /> below.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="rest-api-authz-policy-decisions">
  <title>Requesting Policy Decisions</title>

  <para>
   You can request policy decisions from OpenAM
   by using the REST APIs described in this section.
   OpenAM evaluates requests
   based on the context and the policies configured,
   and returns decisions that indicate what actions are allowed or denied,
   as well as any attributes or advice
   for the resources specified.
  </para>

  <para>
   To request decisions for specific resources,
   see <xref linkend="rest-api-authz-policy-decision-concrete" />.
  </para>

  <para>
   To request decisions for a resource and all resources beneath it,
   see <xref linkend="rest-api-authz-policy-decision-subtree" />.
  </para>

  <section xml:id="rest-api-authz-policy-decision-concrete">
   <title>Requesting Policy Decisions For Specific Resources</title>

   <para>
    This section shows how you can request a policy decision over REST
    for specific resources.
   </para>

   <para>
    To request policy decisions for specific resources,
    perform an HTTP POST using the evaluation action
    to the appropriate path under the URI where OpenAM is deployed,
    <literal>/json[/<replaceable>realm</replaceable>][/
     <replaceable>subrealm</replaceable>]/policies?_action=evaluate</literal>,
    where <replaceable>realm</replaceable> and
    <replaceable>subrealm</replaceable>
    optionally specifies the realm.
    The payload for the HTTP POST is a JSON object
    that specifies at least the resources,
    and takes the following form.
   </para>

   <programlisting language="javascript">
{
    "resources": [
        "resource1",
        "resource2",
        ...,
        "resourceN"
    ],
    "application": "defaults to iPlanetAMWebAgentService if not specified",
    "subject": {
        "ssoToken": "SSO token ID string",
        "jwt": "JSON Web Token string",
        "claims": {
            "key": "value",
            ...
        }
    },
    "environment": {
        "optional key1": [
            "value",
            "another value",
            ...
        ],
        "optional key2": [
            "value",
            "another value",
            ...
        ],
        ...
    }
}
     </programlisting>

   <variablelist>
    <para>
     The values for the fields shown above are explained below:
    </para>

    <varlistentry>
     <term><literal>"resources"</literal></term>
     <listitem>
      <para>
       This required field specifies the list of resources
       for which to return decisions.
      </para>

      <para>
       For example, when using the default application,
       <literal>"iPlanetAMWebAgentService"</literal>,
       you can request decisions for resource URLs.
      </para>

      <programlisting language="javascript">
{
    "resources": [
        "http://www.example.com/index.html",
        "http://www.example.com/do?action=run"
    ]
}
      </programlisting>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"application"</literal></term>
     <listitem>
      <para>
       This field holds the name of the application,
       and defaults to <literal>"iPlanetAMWebAgentService"</literal>
       if not specified.
      </para>

      <para>
       For more on applications,
       see <xref linkend="rest-api-authz-applications" />.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"subject"</literal></term>
     <listitem>
      <para>
      </para>

      <variablelist>
       <para>
        This optional field holds an object that represents the subject.
        You can specify one or more of the following keys.
        If you specify multiple keys,
        the subject can have multiple associated principals,
        and you can use subject conditions corresponding to any type in the request.
       </para>

       <varlistentry>
        <term>"ssoToken"</term>
        <listitem>
         <para>
          The value is the SSO token ID string for the subject,
          returned for example on successful authentication as described in
          <link
           xlink:show="new"
           xlink:href="dev-guide#rest-api-auth-json"
           xlink:role="http://docbook.org/xlink/role/olink"
          ><citetitle>REST APIs for Authentication &amp; Logout</citetitle></link>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term>"jwt"</term>
        <listitem>
         <para>
          The value is a JWT string.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term>"claims"</term>
        <listitem>
         <para>
          The value is an object (map) of JWT claims to their values.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>

      <para>
       If you do not specify the subject,
       OpenAM uses the SSO token ID of the subject making the request.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"environment"</literal></term>
     <listitem>
      <para>
       This optional field holds a map of keys to lists of values.
      </para>

      <para>
       If you do not specify the environment, the default is an empty map.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The example below requests policy decisions for two URL resources.
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "resources": [
        "http://www.example.com/index.html",
        "http://www.example.com/do?action=run"
    ],
    "application": "iPlanetAMWebAgentService"
 }' \
 https://openam.example.com:8443/openam/json/policies?_action
    =evaluate</userinput>
<computeroutput>[ {
  "resource" : "http://www.example.com/do?action=run",
  "actions" : {
  },
  "attributes" : {
  },
  "advices" : {
    "AuthLevelConditionAdvice" : [ "3" ]
  }
}, {
  "resource" : "http://www.example.com/index.html",
  "actions" : {
    "POST" : false,
    "GET" : true
  },
  "attributes" : {
    "cn" : [ "demo" ]
  },
  "advices" : {
  }
} ]</computeroutput>
     </programlisting>

   <variablelist>
    <para>
     In the JSON list of decisions returned for each resource,
     OpenAM includes these fields.
    </para>

    <varlistentry>
     <term><literal>"resource"</literal></term>
     <listitem>
      <para>
       A resource specified in the request.
      </para>

      <para>
       The decisions returned are not guaranteed
       to be in the same order as the resources were requested.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"actions"</literal></term>
     <listitem>
      <para>
       A map of action name keys
       to Boolean values that indicate whether
       the action is allowed (<literal>true</literal>)
       or denied (<literal>false</literal>)
       for the specified resource.
      </para>

      <para>
       In the example,
       for resource <literal>http://www.example.com:80/index.html</literal>
       HTTP GET is allowed, whereas HTTP POST is denied.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"attributes"</literal></term>
     <listitem>
      <para>
       A map of attribute names to their values,
       if any response attributes are returned
       according to applicable policies.
      </para>

      <para>
       In the example, the policy that applies
       to <literal>http://www.example.com:80/index.html</literal>
       causes that the value of the subject's "cn" profile attribute
       to be returned.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"advices"</literal></term>
     <listitem>
      <para>
       A map of advice names to their values,
       if any advice is returned according to applicable policies.
      </para>

      <para>
       The <literal>"advices"</literal> field can provide hints
       regarding what OpenAM needs to take the authorization decision.
      </para>

      <para>
       In the example, the policy that applies
       to <literal>http://www.example.com:80/do?action=run</literal>
       requests that the subject be authenticated
       at an authentication level of at least 3.
      </para>

      <programlisting language="javascript">
{
    "advices": {
        "AuthLevelConditionAdvice": [
            "3"
        ]
    }
}
      </programlisting>

      <para>
       See <xref linkend="rest-api-authz-policy-decision-advice" /> for details.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-policy-decision-advice">
   <title>Policy Decision Advice</title>

   <para>
    When OpenAM returns a policy decision,
    the JSON for the decision can include an "advices" field.
    This field contains hints for the policy enforcement point.
   </para>

   <programlisting language="javascript">
{
    "advices": {
        "<replaceable>type</replaceable>": [
            "<replaceable>advice</replaceable>"
        ]
    }
}
   </programlisting>

   <para>
    The "advices" returned depend on policy conditions. For more
    information about OpenAM policy conditions, see
    <xref linkend="rest-api-authz-policies" />.
   </para>
   <para>
    This section shows examples of the different types
    of policy decision advice
    and the conditions that cause OpenAM to return the advice.
   </para>

   <para>
    <literal>"AuthLevel"</literal>
    and
    <literal>"LEAuthLevel"</literal>
    condition failures can result in advice
    showing the expected or maximum possible authentication level.
    For example, failure against the following condition:
   </para>

   <programlisting language="javascript">
{
    "type": "AuthLevel",
    "authLevel": 2
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "AuthLevelConditionAdvice": [
        "2"
    ]
}
   </programlisting>

   <para>
    An
    <literal>"AuthScheme"</literal>
    condition failure can result in advice
    showing one or more required authentication modules.
    For example, failure against the following condition:
   </para>
   <programlisting language="javascript">
{
    "type": "AuthScheme",
    "authScheme": [
        "HOTP"
    ],
    "applicationName": "iPlanetAMWebAgentService",
    "applicationIdleTimeout": 10
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "AuthSchemeConditionAdvice": [
        "HOTP"
    ]
}
   </programlisting>

   <para>
    An
    <literal>"AuthenticateToRealm"</literal>
    condition failure can result in advice
    showing the name of the realm to which authentication
    is required. For example, failure against the following condition:
   </para>
   <programlisting language="javascript">
{
    "type": "AuthenticateToRealm",
    "authenticateToRealm": "MyRealm"
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "AuthenticateToRealmConditionAdvice": [
        "/myRealm"
    ]
}
   </programlisting>

   <para>
    An
    <literal>"AuthenticateToService"</literal>
    condition failure can result in advice
    showing the name of the required authentication chain.
    For example, failure against the following condition:
   </para>
   <programlisting language="javascript">
{
    "type": "AuthenticateToService",
    "authenticateToService": "MyAuthnChain"
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "AuthenticateToServiceConditionAdvice": [
        "MyAuthnChain"
    ]
}
   </programlisting>

   <para>
    A
    <literal>"ResourceEnvIP"</literal>
    condition failure can result in advice
    showing that indicates corrective action to be taken
    to resolve the problem. The advice varies, depending on what the condition
    tests. For example, failure against the following condition:
   </para>
   <programlisting language="javascript">
{
    "type": "ResourceEnvIP",
    "resourceEnvIPConditionValue": [
        "IF IP=[127.0.0.12] THEN authlevel=4"
    ]
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "AuthLevelConditionAdvice": [
        "4"
    ]
}
   </programlisting>

   <para>
    Failure against a different type of
    <literal>"ResourceEnvIP"</literal>
    condition such as the following:
   </para>
   <programlisting language="javascript">
{
    "type": "ResourceEnvIP",
    "resourceEnvIPConditionValue": [
        "IF IP=[127.0.0.11] THEN service=MyAuthnChain"
    ]
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "AuthenticateToServiceConditionAdvice": [
        "MyAuthnChain"
    ]
}
   </programlisting>

   <para>
    A
    <literal>"Session"</literal>
    condition failure can result in advice
    showing that access has been denied because
    the user's session has been active
    longer than allowed by the condition.
    The advice will also show if the the user's session
    was terminated and reauthentication is required.
    For example, failure against the following condition:
   </para>
   <programlisting language="javascript">
{
    "type": "Session",
    "maxSessionTime": "10",
    "terminateSession": false
}
   </programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">
{
    "SessionConditionAdvice": [
        "deny"
    ]
}
   </programlisting>

   <para>
    When policy evaluation denials occur against the following conditions,
    OpenAM does not return any advice:
    <itemizedlist>
     <listitem>
      <para>
       <literal>IPv4</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>IPv6</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>LDAPFilter</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>OAuth2Scope</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>SessionProperty</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>SimpleTime</literal>
      </para>
     </listitem>
    </itemizedlist>
   </para>

  </section>

  <section xml:id="rest-api-authz-policy-decision-subtree">
   <title>Requesting Policy Decisions For a Tree of Resources</title>

   <para>
    This section shows how you can request policy decisions over REST
    for a resource and all other resources in the subtree beneath it.
   </para>

   <para>
    To request policy decisions for a tree of resources,
    perform an HTTP POST using the evaluation action to the appropriate path
    under the URI where OpenAM is deployed,
    <literal>/json[/<replaceable>realm</replaceable>]/policies?_action=evaluateTree</literal>,
    where <replaceable>realm</replaceable> optionally specifies the realm.
    The payload for the HTTP POST is a JSON object that specifies
    at least the root resource, and takes the following form.
   </para>

   <programlisting language="javascript">
{
    "resource": "resource string",
    "application": "defaults to iPlanetAMWebAgentService if not specified",
    "subject": {
        "ssoToken": "SSO token ID string",
        "jwt": "JSON Web Token string",
        "claims": {
            "key": "value",
            ...
        }
    },
    "environment": {
        "optional key1": [
            "value",
            "another value",
            ...
        ],
        "optional key2": [
            "value",
            "another value",
            ...
        ],
        ...
    }
}
   </programlisting>

   <variablelist>
    <para>
     The values for the fields shown above are explained below:
    </para>

    <varlistentry>
     <term><literal>"resource"</literal></term>
     <listitem>
      <para>
       This required field specifies the root resource
       for the decisions to return.
      </para>

      <para>
       For example, when using the default application,
       <literal>"iPlanetAMWebAgentService"</literal>,
       you can request decisions for resource URLs.
      </para>

      <programlisting language="javascript">
{
    "resource": "http://www.example.com/"
}
      </programlisting>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"application"</literal></term>
     <listitem>
      <para>
       This field holds the name of the application,
       and defaults to <literal>"iPlanetAMWebAgentService"</literal>
       if not specified.
      </para>

      <para>
       For more on applications,
       see <xref linkend="rest-api-authz-applications" />.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"subject"</literal></term>
     <listitem>
      <para>
      </para>

      <variablelist>
       <para>
        This optional field holds an object that represents the subject.
        You can specify one or more of the following keys.
        If you specify multiple keys,
        the subject can have multiple associated principals,
        and you can use subject conditions corresponding to any type in the request.
       </para>

       <varlistentry>
        <term>"ssoToken"</term>
        <listitem>
         <para>
          The value is the SSO token ID string for the subject,
          returned for example on successful authentication as described in,
          <link
           xlink:show="new"
           xlink:href="dev-guide#rest-api-auth-json"
           xlink:role="http://docbook.org/xlink/role/olink"
          ><citetitle>REST APIs for Authentication &amp; Logout</citetitle></link>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term>"jwt"</term>
        <listitem>
         <para>
          The value is a JWT string.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term>"claims"</term>
        <listitem>
         <para>
          The value is an object (map) of JWT claims to their values.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>

      <para>
       If you do not specify the subject,
       OpenAM uses the SSO token ID of the subject making the request.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"environment"</literal></term>
     <listitem>
      <para>
       This optional field holds a map of keys to lists of values.
      </para>

      <para>
       If you do not specify the environment, the default is an empty map.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    The example below requests policy decisions
    for <literal>http://www.example.com/</literal>.
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation,
    and the subject takes the SSO token of the user
    who wants to access a resource.
   </para>

   <programlisting>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5...NDU1*" \
 --header "Content-Type: application/json" \
 --data '{
    "resource": "http://www.example.com/",
    "subject": { "ssoToken": "AQIC5...zE4*" }
 }' \
 https://openam.example.com:8443/openam/json/policies?_action=evaluateTree</userinput>
<computeroutput>[ {
  "resource" : "http://www.example.com/",
  "actions" : {
    "GET" : true,
    "OPTIONS" : true,
    "HEAD" : true
  },
  "attributes" : {
  },
  "advices" : {
  }
}, {
  "resource" : "http://www.example.com/*",
  "actions" : {
    "POST" : false,
    "PATCH" : false,
    "GET" : true,
    "DELETE" : true,
    "OPTIONS" : true,
    "HEAD" : true,
    "PUT" : true
  },
  "attributes" : {
    "myStaticAttr" : [ "myStaticValue" ]
  },
  "advices" : {
  }
}, {
  "resource" : "http://www.example.com/*?*",
  "actions" : {
    "POST" : false,
    "PATCH" : false,
    "GET" : false,
    "DELETE" : false,
    "OPTIONS" : true,
    "HEAD" : false,
    "PUT" : false
  },
  "attributes" : {
  },
  "advices" : {
    "AuthLevelConditionAdvice" : [ "3" ]
  }
} ]</computeroutput>
  </programlisting>

   <para>
    Notice that OpenAM returns decisions not only for the specified resource,
    but also for matching resource names
    in the tree whose root is the specified resource.
   </para>

   <variablelist>
    <para>
     In the JSON list of decisions returned for each resource,
     OpenAM includes these fields.
    </para>

    <varlistentry>
     <term><literal>"resource"</literal></term>
     <listitem>
      <para>
       A resource name whose root is the resource specified in the request.
      </para>

      <para>
       The decisions returned are not guaranteed
       to be in the same order as the resources were requested.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"actions"</literal></term>
     <listitem>
      <para>
       A map of action name keys
       to Boolean values that indicate whether
       the action is allowed (<literal>true</literal>)
       or denied (<literal>false</literal>)
       for the specified resource.
      </para>

      <para>
       In the example, for matching resources with a query string
       only HTTP OPTIONS is allowed according to the policies configured.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"attributes"</literal></term>
     <listitem>
      <para>
       A map of attribute names to their values,
       if any response attributes are returned
       according to applicable policies.
      </para>

      <para>
       In the example, the policy that applies
       to <literal>http://www.example.com:80/*</literal>
       causes a static attribute to be returned.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"advices"</literal></term>
     <listitem>
      <para>
       A map of advice names to their values,
       if any advice is returned according to applicable policies.
      </para>

      <para>
       The <literal>"advices"</literal> field can provide hints
       regarding what OpenAM needs to take the authorization decision.
      </para>

      <para>
       In the example, the policy that applies
       to resources with a query string
       requests that the subject be authenticated
       at an authentication level of at least 3.
      </para>
      <para>
       Notice that with the <literal>"advices"</literal> field
       present, no <literal>"advices"</literal> appear in the
       JSON response.
      </para>

      <programlisting language="javascript">
{
    "advices": {
        "AuthLevelConditionAdvice": [ "3" ]
    }
}
      </programlisting>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

 </section>

 <section xml:id="rest-api-authz-policies">
  <title>Managing Policies</title>

  <para>
   Policy resources are represented in JSON and take the following form.
   Policy resources are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

  <programlisting language="javascript">
{
   "name": "test",
   "active": true,
   "description": "A test policy",
   "resources": [
           "http://www.example.com:80/*"
   ],
   "applicationName": "application name",
   "actionValues": {
       "read": true,
       "write": false
   },
   "subject": {
       "a subject or": "a composite of subjects"
   },
   "condition": {
       "a condition or": "a composite of conditions"
   },
   "resourceAttributes": [
       {
           "type": "Static",
           "propertyName": "name",
           "propertyValues": [
               "value"
           ]
       },
       {
           "type": "User",
           "propertyName": "profile attribute",
       },
   ]
}
  </programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the example are explained below:
   </para>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      String matching the name
      in the URL used when creating the policy by HTTP PUT
      or in the body when creating the policy by HTTP POST.
     </para>


    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"active"</literal></term>
    <listitem>
     <para>
      Boolean indicating whether OpenAM considers the policy active
      for evaluation purposes, defaults to <literal>false</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"description"</literal></term>
    <listitem>
     <para>
      String describing the policy.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resources"</literal></term>
    <listitem>
     <para>
      List of the resource name pattern strings
      to which the policy applies.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"applicationName"</literal></term>
    <listitem>
     <para>
      String application name,
      such as <literal>"iPlanetAMWebAgentService"</literal>,
      <literal>"crestPolicyService"</literal>,
      or some other application name.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"actionValues"</literal></term>
    <listitem>
     <para>
      Set of string action names,
      each set to a boolean indicating whether the action is allowed.
     </para>

     <para>
      Action values can also be expressed as numeric values. When using
      numeric values, use the value <literal>0</literal> for
      <literal>false</literal> and use any non-zero numeric
      value for <literal>true</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"subject"</literal></term>
    <listitem>
     <para>
      Specifies the subject conditions to which the policy applies,
      where subjects can be combined by using the built-in types
      <literal>"AND"</literal>, <literal>"OR"</literal>,
      and <literal>"NOT"</literal>,
      and where subject implementations are pluggable.
     </para>

     <para>
      Subjects are shown as JSON objects
      with <literal>"type"</literal> set to the name of the implementation
      (using a short name for all registered subject implementations),
      and also other fields depending on the implementation.
      The subject types registered by default include the following:
     </para>

     <itemizedlist>
      <listitem>
       <para>
        <literal>"AuthenticatedUsers"</literal>,
        meaning any user that has successfully authenticated to OpenAM.
       </para>
       <programlisting language="javascript">
{
    "type": "AuthenticatedUsers"
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"Identity"</literal>
        to specify one or more users from an OpenAM identity repository:
       </para>

       <programlisting language="javascript">
{
   "type": "Identity",
   "subjectValues": [
       "uid=scarter,ou=People,dc=example,dc=com",
       "uid=ahall,ou=People,dc=example,dc=com"
   ]
}
       </programlisting>

       <para>
        You can also use the
        <literal>"Identity"</literal>
        subject type to specify one or more groups from an identity repository:
       </para>

       <programlisting language="javascript">
{
    "type": "Identity",
    "subjectValues": [
        "cn=HR Managers,ou=Groups,dc=example,dc=com"
    ]
}
       </programlisting>

      </listitem>

      <listitem>
       <para>
        <literal>"JwtClaim"</literal>
        to specify a claim in a
        user's JSON web token (JWT).
       </para>
       <programlisting language="javascript">
{
    "type": "JwtClaim",
    "claimName": "sub",
    "claimValue": "scarter"
}
      </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"NONE"</literal>,
        meaning never match any subject. The result is not that access is denied, but
        rather that the policy itself does not match and therefore cannot be
        evaluated in order to allow access.
       </para>
      </listitem>

     </itemizedlist>

     <para>
      The following example defines the subject
      either as the user Sam Carter from an OpenAM identity repository,
      or as a user with a JWT claim with a subject claim with the value
      scarter:
     </para>

     <programlisting language="javascript">
"subject": {
    "type": "OR",
    "subjects": [
       {
           "type": "Identity",
           "subjectValues": [
               "uid=scarter,ou=People,dc=example,dc=com"
           ]
       },
       {
           "type": "JwtClaim",
           "claimName": "sub",
           "claimValue": "scarter"
       }
   ]
}
     </programlisting>

     <para>
      To read a single subject type description,
      or to list all the available subject types,
      see <xref linkend="rest-api-authz-subject-types" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"condition"</literal></term>
    <listitem>
     <para>
      Specifies environment conditions, where conditions can be combined
      by using the built-in types <literal>"AND"</literal>,
      <literal>"OR"</literal>, and <literal>"NOT"</literal>,
      and where condition implementations are pluggable.
     </para>

     <para>
      Conditions are shown as JSON objects
      with <literal>"type"</literal> set to the name of the implementation
      (using a short name for all registered condition implementations),
      and also other fields depending on the implementation.
      The condition types registered by default include the following.
     </para>

     <itemizedlist>

      <listitem>
      <para>
       <literal>"AMIdentityMembership"</literal>
       to specify a list of OpenAM users and groups.
      </para>
      <programlisting language="javascript">
{
    "type": "AMIdentityMembership",
    "amIdentityName": [
        "id=scarter,ou=People,dc=example,dc=com"
    ]
}
      </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthLevel"</literal>
        to specify the authentication level.
       </para>
       <programlisting language="javascript">
{
    "type": "AuthLevel",
    "authLevel": 2
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthScheme"</literal>
        to specify the authentication module used to authenticate and
        the application name, and to set a timeout for application
        authentication.
       </para>
       <programlisting language="javascript">
{
    "type": "AuthScheme",
    "authScheme": [
        "DataStore"
    ],
    "applicationName": "iPlanetAMWebAgentService",
    "applicationIdleTimeout": 10
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthenticateToRealm"</literal>
        to specify the realm to which the user authenticated.
       </para>
       <programlisting language="javascript">
{
    "type": "AuthenticateToRealm",
    "authenticateToRealm": "MyRealm"
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthenticateToService"</literal>
        to specify the authentication chain that was used
        to authenticate.
       </para>
       <programlisting language="javascript">
{
    "type": "AuthenticateToService",
    "authenticateToService": "MyAuthnChain"
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"IPv4"</literal>
        or
        <literal>"IPv6"</literal>
        to specify an IP address range from which
        the request originated.
       </para>
       <programlisting language="javascript">
{
   "type": "IPv4",
   "startIp": "127.0.0.1",
   "endIp": "127.0.0.255"
}
       </programlisting>

       <para>
        You can also use the
        <literal>"IPv4"</literal>
        and
        <literal>"IPv6"</literal>
        conditions with the
        <literal>"dnsName"</literal>
        field to specify domain names from which the request originated. Omit
        <literal>"startIp"</literal>
        and
        <literal>"endIp"</literal>
        when using
        <literal>"dnsName"</literal>.
       </para>
       <programlisting language="javascript">
{
    "type": "IPv4",
    "dnsName": [
        "*.example.com"
    ]
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"LDAPFilter"</literal>
        to specify an LDAP search filter. The user's entry is tested
        against the search filter in the directory configured in the
        Policy Configuration Service.
       </para>
       <programlisting language="javascript">
{
    "type": "LDAPFilter",
    "ldapFilter": "(&amp;(c=US)(preferredLanguage=en-us))"
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"LEAuthLevel"</literal>
        to specify a maximum acceptable authentication level.
       </para>
       <programlisting language="javascript">
{
    "type": "LEAuthLevel",
    "authLevel": 2
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"OAuth2Scope"</literal>
        to specify a list of attributes that
        must be present in the user profile.
       </para>
       <programlisting language="javascript">
{
    "type": "OAuth2Scope",
    "requiredScopes": [
        "name",
        "address",
        "email"
    ]
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"ResourceEnvIP"</literal>
        to specify a complex condition such as whether the user is making a
        request from a given host and has authenticated with a given
        authentication level. For example:
       </para>
       <programlisting language="javascript">
{
    "type": "ResourceEnvIP",
    "resourceEnvIPConditionValue": [
        "IF IP=[127.168.10.*] THEN authlevel=4"
    ]
}
       </programlisting>
       <para>
        Entries must take the form of one or more IF...ELSE statements.
        If the IF statement is true,
        the THEN statement must also be true for the condition to be fulfilled.
        The IF statement can specify either IP to match the user's IP address,
        or dnsName to match their DNS name.
        The IP address can be IPv4 or IPv6 format, or a hybrid of the two, and
        can include wildcard characters.
       </para>
       <para>
         The available parameters for the THEN statement are as follows:
       </para>

       <variablelist>
        <varlistentry>
         <term>
          <literal>module</literal>
         </term>
         <listitem>
          <para>
           The module that was used to authenticate the user,
           for example DataStore.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>service</literal>
         </term>
         <listitem>
          <para>
           The authentication chain that was used to authenticate the user.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>authlevel</literal>
         </term>
         <listitem>
          <para>
           The minimum required authentication level.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>role</literal>
         </term>
         <listitem>
          <para>
           The role of the authenticated user.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>user</literal>
         </term>
         <listitem>
          <para>
           The name of the authenticated user.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>redirectURL</literal>
         </term>
         <listitem>
          <para>
           The URL from which the user was redirected.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>realm</literal>
         </term>
         <listitem>
          <para>
           The realm to which the user authenticated.
          </para>
         </listitem>
        </varlistentry>

       </variablelist>

      </listitem>

      <listitem>
       <para>
        <literal>"Session"</literal>
        to specify how long the user's session has been active,
        and to terminate the session if deemed too old,
        such that the user must authenticate again.
       </para>
       <programlisting language="javascript">
{
    "type": "Session",
    "maxSessionTime": "10",
    "terminateSession": false
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"SessionProperty"</literal>
        to specify attributes set in the user's session.
       </para>
       <programlisting language="javascript">{
    "type": "SessionProperty",
    "ignoreValueCase": true,
    "properties": {
        "CharSet": [
            "UTF-8"
        ],
        "clientType": [
            "genericHTML"
        ]
    }
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"SimpleTime"</literal>
        to specify a time range, where
        <literal>"type"</literal>
        is the only required field.
       </para>

       <programlisting language="javascript">
{
    "type": "SimpleTime",
    "startTime": "07:00",
    "endTime": "19:00",
    "startDay": "mon",
    "endDay": "fri",
    "startDate": "2015:01:01",
    "endDate": "2015:12:31",
    "enforcementTimeZone": "GMT+0:00"
}
       </programlisting>
      </listitem>
     </itemizedlist>

     <para>
      The following example defines the condition as
      neither Saturday or Sunday, nor certain client IP addresses.
     </para>
     <programlisting language="javascript">
{
    "type": "NOT",
    "condition": {
        "type": "OR",
        "conditions": [
            {
                "type": "SimpleTime",
                "startDay": "sat",
                "endDay": "sun",
                "enforcementTimeZone": "GMT+8:00"
            },
            {
                "type": "IPv4",
                "startIp": "192.168.0.1",
                "endIp": "192.168.0.255"
            }
        ]
    }
}
     </programlisting>

      <para>
       To read a single condition type description,
       or to list all the available condition types,
       see <xref linkend="rest-api-authz-condition-types" />.
      </para>
     </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resourceAttributes"</literal></term>
    <listitem>
     <para>
      List of attributes to return with decisions. These attributes
      are known as <firstterm>response attributes</firstterm>.
     </para>

     <para>The response attribute provider is pluggable.
      The default implementation provides
      for statically defined attributes
      and for attributes retrieved from user profiles.
     </para>

     <para>
      Attributes are shown as JSON objects
      with <literal>"type"</literal> set to the name of the implementation
      (by default either
      <literal>"Static"</literal> for statically defined attributes
      or <literal>"User"</literal> for attributes from the user profile),
      <literal>"propertyName"</literal> set to the attribute names.
      For static attributes, <literal>"propertyValues"</literal>
      holds the attribute values.
      For user attributes, <literal>"propertyValues"</literal>
      is not used; the property values are determined at evaluation time.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The examples above do not show the fields added to a policy by OpenAM
   to indicate when the policy was created and last updated, and by whom.
   Those field are
   <literal>"createdBy"</literal> and <literal>"lastModifiedBy"</literal>,
   which take strings holding universal identifier DNs as their values,
   and <literal>"creationDate"</literal> and <literal>"lastModifiedDate
   "</literal>,
   which take strings holding ISO-8601 timestamps.
  </para>

  <section xml:id="rest-api-authz-policies-create">
   <title>Creating Policies</title>

   <para>
    To create a policy,
    either perform an HTTP PUT indicating the full path to the resource
    and the name in the resource matching the name in the path,
    or perform an HTTP POST with the name to use specified in the resource.
   </para>

   <para>
    The HTTP PUT form includes the policy definition as the JSON resource data,
    with the header <literal>Content-Type: application/json</literal>
    and uses the <literal>If-None-Match: *</literal> header.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
    <xinclude:fallback>
     Failed to include para-special-characters
    </xinclude:fallback>
   </xinclude:include>

   <programlisting>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --header "If-None-Match: *" \
 --header "Content-Type: application/json" \
 --data '{
    "name": "example",
    "active": true,
    "description": "Example Policy",
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "actionValues": {
        "POST": false,
        "GET": true
    },
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=scarter,ou=People,dc=example,dc=com"
        ]
    }
}' \
 https://openam.example.com:8443/openam/json/policies/example
</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Example Policy",
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : false,
    "GET" : true
  },
  "resources" : [
    "http://www.example.com:80/*",
    "http://www.example.com:80/*?*"
  ],
  "subject" : {
   "type": "Identity",
    "subjectValues": [
      "uid=scarter,ou=People,dc=example,dc=com"
    ]
  },
  "lastModifiedBy" :
  "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModifiedDate" : "2014-04-24T16:23:34Z",
  "createdBy" :
  "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
   </programlisting>

      <para>
       You can use the query string parameters
       <literal>_prettyPrint=true</literal> to make the output easier to read,
       and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
       to limit the fields returned in the output.
      </para>

      <para>
       The HTTP POST form includes the policy definition as the JSON resource data,
       with the header <literal>Content-Type: application/json</literal>
       and uses the <literal>_action=create</literal> operation.
      </para>

      <para>
       The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
       for a user who has access to perform the operation.
      </para>

      <programlisting>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "example",
    "active": true,
    "description": "Example Policy",
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "actionValues": {
        "POST": false,
        "GET": true
    },
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=scarter,ou=People,dc=example,dc=com"
        ]
    }
}' \
 https://openam.example.com:8443/openam/json/policies?_action=create
      </userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Example Policy",
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : false,
    "GET" : true
  },
  "resources" : [
    "http://www.example.com:80/*",
    "http://www.example.com:80/*?*"
  ],
  "subject" : {
    "type": "Identity",
    "subjectValues": [
      "uid=scarter,ou=People,dc=example,dc=com"
    ]
  },
  "lastModifiedBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModifiedDate" : "2014-04-29T07:33:54Z",
  "createdBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-29T07:33:54Z"
}</computeroutput>
      </programlisting>
     </section>

  <section xml:id="rest-api-authz-policies-read">
   <title>Reading Policies</title>

   <para>
    To read a policy definition, perform an HTTP GET
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/policies/example
</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Example Policy",
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : false,
    "GET" : true
  },
  "resources" : [
    "http://www.example.com:80/*",
    "http://www.example.com:80/*?*"
  ],
  "subject" : {
    "type": "Identity",
    "subjectValues": [
      "uid=scarter,ou=People,dc=example,dc=com"
    ]
  },
  "lastModifiedBy" :
  "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModifiedDate" : "2014-04-24T16:23:34Z",
  "createdBy" :
  "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-policies-update">
   <title>Updating Policies</title>

   <para>
    To update a policy definition, perform an HTTP PUT
    specifying the resource name
    with the policy definition as the JSON resource data,
    and with the header <literal>Content-Type: application/json</literal>.
    This is essentially the same as creating a policy,
    but without the <literal>If-None-Match: *</literal> header.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "example",
    "active": true,
    "description": "Updated example policy",
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "actionValues": {
        "POST": true,
        "GET": true
    },
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=scarter,ou=People,dc=example,dc=com"
        ]
    }
}' \
 https://openam.example.com:8443/openam/json/policies/example
</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Updated example policy",
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : true,
    "GET" : true
  },
  "resources" : [
    "http://www.example.com:80/*",
    "http://www.example.com:80/*?*"
  ],
  "subject" : {
    "type": "Identity",
    "subjectValues": [
      "uid=scarter,ou=People,dc=example,dc=com"
    ]
  },
  "lastModifiedBy" :
  "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModifiedDate" : "2014-04-24T16:44:01Z",
  "createdBy" :
  "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
   </programlisting>

    <tip><para>You can rename a policy by sending a new value in the
     <emphasis>name</emphasis> attribute of the JSON body,
     as shown below.</para>

<programlisting>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --header "Content-Type: application/json" \
 --data '{
     "name": "new-example",
     "active": true,
     "description": "Renamed example policy",
     "resources": [
         "http://www.example.com:80/*",
         "http://www.example.com:80/*?*"
     ],
     "actionValues": {
         "POST": true,
         "GET": true
     },
     "subject": {
         "type": "Identity",
         "subjectValues": [
             "uid=scarter,ou=People,dc=example,dc=com"
         ]
     }
 }' \
 https://openam.example.com:8443/openam/json/policies/example
</userinput>
<computeroutput>{
    "name" : "new-example",
    "active" : true,
    "description" : "Renamed example policy",
    "applicationName" : "iPlanetAMWebAgentService",
    "actionValues" : {
        "POST" : true,
        "GET" : true
    },
    "resources" : [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "subject" : {
        "type": "Identity",
        "subjectValues": [
            "uid=scarter,ou=People,dc=example,dc=com"
        ]
    },
    "lastModifiedBy" :
    "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate" : "2014-04-24T16:48:01Z",
    "createdBy" :
    "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
    "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
   </programlisting></tip>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-policies-delete">
   <title>Deleting Policies</title>

   <para>
    To delete a policy definition, perform an HTTP DELETE
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --request DELETE \
 https://openam.example.com:8443/openam/json/policies/myPolicy</userinput>
<computeroutput>{}</computeroutput>
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-policies-query">
   <title>Listing Policies</title>

   <para>
    To list policy definitions, perform an HTTP GET on the endpoint, setting
    the <literal>_queryFilter</literal> query string parameter.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/policies?_queryFilter=true
   </userinput>
<computeroutput>{
  "result" : [ ...policies... ],
  "resultCount" : 0,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
   </programlisting>

   <para>
    The <literal>_queryFilter</literal> parameter can take
    <literal>true</literal> to match every policy,
    <literal>false</literal> to match no policies,
    or a filter of the following form to match field values:
    <literal><replaceable>field</replaceable> <replaceable>operator</replaceable> <replaceable>value</replaceable></literal>
    where <replaceable>field</replaceable> represents the field name,
    <replaceable>operator</replaceable> is the operator code,
    <replaceable>value</replaceable> is the value to match,
    and the entire filter is URL-encoded.
    Supported operators are as follows:
   </para>

   <itemizedlist>
 <!-- Not supported
       <listitem>
        <para>
         <literal>co</literal>: contains
        </para>
       </listitem>
 -->

    <listitem>
     <para>
      <literal>eq</literal>: equals
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>ge</literal>: greater than or equal to
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>gt</literal>: greater than
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>le</literal>: less than or equal to
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>lt</literal>: less than
     </para>
    </listitem>

 <!-- Not supported
       <listitem>
        <para>
         <literal>pr</literal>: exists, is present
        </para>

        <para>
         Do not set a <replaceable>value</replaceable> when using this operator.
        </para>
       </listitem>

       <listitem>
        <para>
         <literal>sw</literal>: starts with
        </para>
       </listitem>
 -->
   </itemizedlist>

   <itemizedlist>
    <para>
     The <literal><replaceable>field</replaceable></literal> value
     can take the following values:
    </para>

    <listitem>
     <para>
      <literal>"name"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"description"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"applicationName"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"createdBy"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"lastModifiedBy"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"creationDate"</literal> (all comparisons are supported;
      the date is either an
      <link xlink:show="new"
            xlink:href="http://www.w3.org/TR/NOTE-datetime"
      >ISO-8601</link> string,
      or a integer number of seconds from the UNIX epoch)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"lastModifiedDate"</literal> (all comparisons are supported;
      the date is either an
      <link xlink:show="new"
            xlink:href="http://www.w3.org/TR/NOTE-datetime"
      >ISO-8601</link> string,
      or a integer number of seconds from the UNIX epoch)
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Filters can be composed of multiple expressions
    by a using boolean operator <literal>AND</literal>,
    <!-- Not supported: <literal>OR</literal>, or <literal>!</literal> (NOT),-->
    and by using parentheses,
    <literal>(<replaceable>expression</replaceable>)</literal>,
    to group expressions.
    You must URL encode the filter expression
    in <literal>_queryFilter=<replaceable>filter</replaceable></literal>.
   </para>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>

   <para>
    You can use <literal>_pageSize=<replaceable>integer</replaceable></literal>
    to limit the number of results returned, as shown in the following example
    that returns only the first of three policies.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/policies?_queryFilter=true\&amp;_fields=name\&amp;_pageSize=1</userinput>
<computeroutput>{
  "result" : [ {
    "name" : "My Other Policy"
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 2
}</computeroutput>
   </programlisting>

   <para>
    You can use <literal>_sortKeys=[+-]<replaceable>field</replaceable>[,<replaceable>field</replaceable>...]</literal>
    to sort the results returned,
    where <replaceable>field</replaceable> represents a field
    in the JSON policy objects returned.
    Optionally use the <literal>+</literal> prefix to sort in ascending order
    (the default),
    or <literal>-</literal> to sort in descending order.
    The following example sorts the policy objects by their names.
   </para>

   <programlisting>
$ <userinput>curl \
  --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/policies?_queryFilter=true\&amp;_sortKeys=name</userinput>
  <computeroutput>{
  "result" : [ {
    "name" : "Another Example Policy",
    ...
  }, {
    "name" : "My Other Policy",
    ...
  }, {
    "name" : "Sample Policy",
    ...
  } ],
  "resultCount" : 3,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 0
}</computeroutput>
   </programlisting>
  </section>
 </section>

 <section xml:id="rest-api-manage-xacml">
  <title>XACML 3.0 Export and Import</title>

  <para>
   OpenAM supports the ability to export policies to
   eXtensible Access Control Markup Language (XACML) 3.0-based
   formatted policy sets
   through its <literal>/xacml/policies</literal> REST endpoint.
   You can also import XACML 3.0 policy sets back into OpenAM by using the
   same endpoint.
   The endpoint's functionally is identical to that of the
   <!--  Update when AME-4741 -->
   <literal>ssoadm</literal> <literal>import-xacml</literal> and
   <literal>export-xacml</literal> commands.
   For more information, see
   <link xlink:show="new" xlink:href="admin-guide#script-policy"
         xlink:role="http://docbook.org/xlink/role/olink">Importing and Exporting Policies</link>
  </para>

  <note>
   <para>
   OpenAM can only import XACML 3.0 policy sets that were either created by an
   OpenAM instance, or that have had minor manual modifications,
   due to the reuse of some XACML 3.0 parameters for non-standard information.
   </para>
  </note>

  <para>
   When exporting OpenAM policies to XACML 3.0 policy sets, OpenAM maps its
   policies to XACML 3.0 policy elements. The
   mappings are as follows:
  </para>

  <!-- Consider a new table format -->
  <table xml:id="xacml-mappings">
   <title>OpenAM Policies to XACML Mappings</title>
   <tgroup cols="2">
    <colspec colnum="1" colwidth="1*"/>
    <colspec colnum="2" colwidth="1*"/>
    <thead>
     <row>
      <entry>OpenAM Policy</entry>
      <entry>XACML Policy</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Policy Name</entry>
      <entry>Policy ID</entry>
     </row>
     <row>
      <entry>Description</entry>
      <entry>Description</entry>
     </row>
     <row>
      <entry>Current Time (yyyy.MM.dd.HH.mm.ss.SSS)</entry>
      <entry>Version</entry>
     </row>
     <row>
      <entry>xacml rule target</entry>
      <entry>entitlement excluded resource names</entry>
     </row>
     <row>
      <entry>Rule Deny Overrides</entry>
      <entry>Rule Combining Algorithm ID</entry>
     </row>
     <row>
      <entry>
       <para>Any of:
        <itemizedlist>
         <listitem>
          <para>Entitlement Subject</para>
         </listitem>
         <listitem>
          <para>Resource Names</para>
         </listitem>
         <listitem>
          <para>Application Names</para>
         </listitem>
         <listitem>
          <para>Action Values</para>
         </listitem>
        </itemizedlist>
       </para>
      </entry>
      <entry>Target</entry>
     </row>
     <row>
      <entry>
       <para>Any of:
        <itemizedlist>
        <listitem>
         <para>Application Name</para>
        </listitem>
        <listitem>
         <para>Entitlement Name</para>
        </listitem>
        <listitem>
         <para>Privilege Created By</para>
        </listitem>
        <listitem>
         <para>Privilege Modified By</para>
        </listitem>
        <listitem>
         <para>Privilege Creation Date</para>
        </listitem>
        <listitem>
         <para>Privilege Last Modification Date</para>
        </listitem>
       </itemizedlist>
       </para>
      </entry>
      <entry>Variable Definitions</entry>
     </row>
     <row>
      <entry>
       Single Level Permit/Deny Actions converted
       to Policy Rules
      </entry>
      <entry>Rules</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
    XACML obligation is not supported. Also, only one XACML match is defined for
    each privilege action, and only one XACML rule for each privilege action value.
   </para>
  </note>

  <section xml:id="xacml-export">
   <title>Exporting from OpenAM to XACML</title>
   <para>
    OpenAM supports exporting policies into XACML 3.0 format.

    OpenAM only exports a policy set that contains policy definitions. No other
    types can be included in the policy set, such as sub-policy sets or rules.
    The policy set mapping is as follows:
   </para>

   <table xml:id="xacml-export-mappings">
    <title>Policy Set Mappings</title>
    <tgroup cols="2">
     <colspec colnum="1" colwidth="1*"/>
     <colspec colnum="2" colwidth="2*"/>
     <thead>
      <row>
       <entry>OpenAM</entry>
       <entry>XACML</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Realm:&lt;timestamp>(yyyy.MM.dd.HH.mm.ss.SSS)</entry>
       <entry>PolicySet ID</entry>
      </row>
      <row>
       <entry>Current Time (yyyy.MM.dd.HH.mm.ss.SSS)</entry>
       <entry>Version</entry>
      </row>
      <row>
       <entry>Deny Overrides</entry>
       <entry>Policy Combining Algorithm ID</entry>
      </row>
      <row>
       <entry>No targets defined</entry>
       <entry>Target</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    The export service is accessible at the <literal>/xacml/policies</literal>
    endpoint using a HTTP GET request
    at the following endpoint for the root realm or a specific realm:
   </para>

   <programlisting>
http://openam.example.com:8080/openam/xacml/policies
http://openam.example.com:8080/openam/xacml/{realm}/policies

  where {realm} is the name of a specific realm
   </programlisting>

   <para>
    You can filter your XACML exports using query search filters. Note the
    following points about the search filters:
   </para>

   <itemizedlist>
   <listitem>
    <para><emphasis role="bold">LDAP-based Searches</emphasis>.
     The search filters follow the standard
     guidelines for LDAP searches as they are applied to the
     entitlements index in the LDAP configuration backend, located at:
     <literal>ou=default,ou=OrganizationalConfig,ou=1.0,ou=sunEntitlementIndexes,
      ou=services,dc=openam,dc=forgerock,dc=org</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Search Filter Format</emphasis>. You can specify
     a single search filter or multiple filters in the HTTP URL parameters.
     The format for the search filter is as follows:
    </para>
    <programlisting>
[attribute name][operator][attribute value]
    </programlisting>
    <para>
     If you specify multiple search filters, they are logically ANDed: the
     search results meet the criteria specified in all the
     search filters.
    </para>

    <table xml:id="export-search-filter-format">
     <title>XACML Export Search Filter Format</title>
     <tgroup cols="2">
      <colspec colnum="1" colwidth="1*"/>
      <colspec colnum="2" colwidth="2*"/>
      <thead>
       <row>
        <entry>Element</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Attribute Name</entry>
        <entry>
         <para>
          The name of the attribute to be searched for. The only permissible
          values are: <literal>application</literal>, <literal>createdby</literal>,
          <literal>lastmodifiedby</literal>, <literal>creationdate</literal>,
          <literal>lastmodifieddate</literal>, <literal>name</literal>,
          <literal>description</literal>.
         </para>
        </entry>
       </row>
       <row>
        <entry>Operator</entry>
        <entry>
         <para>The type of comparison operation to perform.</para>
         <itemizedlist>
          <listitem>
           <para>= Equals (text)</para>
          </listitem>
          <listitem>
           <para>&lt; Less Than or Equal To (numerical)</para>
          </listitem>
          <listitem>
           <para>&gt; Greater Than or Equal To (numerical)</para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>Attribute Value</entry>
        <entry>
         <para>
          The matching value. Asterisk wildcards are supported.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   </listitem>
  </itemizedlist>

   <procedure xml:id="export-policies">
   <title>To Export Policies</title>

   <step>
    <para>
     Use the <literal>/xacml/policies</literal> endpoint to export the OpenAM entitlement
     policies into XACML 3.0 format. The following curl command exports the policies
     and returns the XACML response (truncated for display purposes).
    </para>
   <programlisting>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  http://openam.example.com:8080/openam/xacml/policies
  </userinput>
  <computeroutput>
&lt;&#63;xml version="1.0" encoding="UTF-8" standalone="yes"&#63;>
&lt;PolicySet xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
 PolicyCombiningAlgId="urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides"
 Version="2014.10.08.21.59.39.231" PolicySetId="/:2014.10.08.21.59.39.231">
 &lt;Target/>
 &lt;Policy RuleCombiningAlgId="urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides"
  Version="2014.10.08.18.01.03.626"
  PolicyId="Rockshop_Checkout_https://forgerock-rockshop.openrock.org:443/wp-login.php*&#63;*">
  ...</computeroutput>
    </programlisting>
   </step>
  </procedure>

   <procedure xml:id="export-policies-search-filter">
   <title>To Export Policies with Search Filters</title>
   <step>
    <para>
     Use the <literal>/xacml/policies</literal> endpoint to export the policies
     into XACML 3.0 format with a search filter. This command only exports policies
     that were created by "amadmin".
    </para>
    <programlisting>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  http://openam.example.com:8080/openam/xacml/policies&#63;filter=createdby=amadmin
  </userinput>
   </programlisting>
   </step>
   <step>
    <para>
     You can also specify more than one search filter by logically ANDing the filters
     as follows:
    </para>
    <programlisting>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  http://openam.example.com:8080/openam/xacml/policies&#63;filter=createdby=amadmin&#38;
  filter=creationdate=135563832</userinput>
    </programlisting>
    </step>
   </procedure>
  </section>

  <section xml:id="xacml-import">
   <title>Importing from XACML to OpenAM</title>

   <para>
    OpenAM supports the import of XACML 3.0-based policy sets into
    OpenAM policies using the REST <literal>/xacml/policies</literal>
    endpoint.
    To test an import, OpenAM provides a dry-run feature that runs an import
    without saving the changes to the database. The dry-run feature provides a
    summary of the import so that you can troubleshoot any potential mismatches
    prior to the actual import.
   </para>
   <para>
    You can import a XACML policy using an HTTP POST request for the root realm
    or a specific realm at the following endpoints:
   </para>

   <programlisting>
http://openam.example.com:8080/openam/xacml/policies
http://openam.example.com:8080/openam/xacml/{realm}/policies

where {realm} is the name of a specific realm
   </programlisting>

   <procedure xml:id="procedure-xacml-import">
    <title>To Import a XACML 3.0 Policy</title>
    <step>
     <para>You can do a dry run using the <literal>dryrun=true</literal> query to
      test the import. The dry-run option outputs in JSON format and displays the status
      of each import policy, where "U" indicates "Updated"; "A" for "Added". The
      dry-run does not actually update to the database. When you are ready for an
      actual import, you need to re-run the command
      without the <literal>dryrun=true</literal> query.
     </para>
     <programlisting>
$ <userinput>curl \
  --request POST \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/xml" \
  --data @xacml-policy.xml
  http://openam.example.com:8080/openam/xacml/policies?dryrun=true</userinput>
<computeroutput>[
 {
   "status":"U",
   "name":"testHelpDeskreferralpolicy"
 },
 {
   "status":"U",
   "name":"test_Referral"
 },
 {
   "status":"U",
   "name":"testexternalreferralpolicy"
 },
 {
   "status":"U",
   "name":"testregexternalreferralpolicy"
 }
]</computeroutput>
     </programlisting>
    </step>
    <step>
     <para>
Use the <literal>/xacml/policies</literal> endpoint to import a XACML policy:
     </para>
     <programlisting>
$ <userinput>curl \
  --request POST \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/xml" \
  --data @xacml-policy.xml
  http://openam.example.com:8080/openam/xacml/policies</userinput>
     </programlisting>
    </step>
   </procedure>
   <tip>
     <para>You can import a XACML policy into a realm as follows:</para>
     <programlisting>
$ <userinput>curl \
  --request POST \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/xml" \
  --data @xacml-policy.xml
  http://openam.example.com:8080/openam/xacml/{realm}/policies</userinput>
     </programlisting>
   </tip>

  </section>

 </section>

 <section xml:id="rest-api-authz-applications">
  <title>Defining Applications</title>

  <para>
   Application definitions set constraints
   for the policies that can be defined for a particular application.
   The default built-in application is the <literal>iPlanetAMWebAgentService</literal>,
   which OpenAM policy agents use to allow policy management through the console.
  </para>

  <para>
   Application resources are represented in JSON and take the following form.
   Application resources are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

  <xinclude:include href="../shared/para-special-characters.xml">
   <xinclude:fallback>
    Failed to include para-special-characters
   </xinclude:fallback>
  </xinclude:include>

  <programlisting language="javascript">
{
  "name": "application name string",
  "resources": [
     "resource name pattern",
     ...
  ],
  "actions": {
     "action name string": true,
     "other action name string": false,
     ...
  },
  "conditions": [
     "condition type",
     ...
  ],
  "realm": "the realm in which the application is defined",
  "applicationType": "application type name string",
  "description": "string describing application",
  "resourceComparator": "resource comparator class name",
  "subjects": [
     "subject type",
     ...
  ],
  "entitlementCombiner": "decision combiner",
  "saveIndex": "save index class name",
  "searchIndex": "search index class name",
  "attributeNames": [
     "attribute implementation class name",
     ...
  ]
}
  </programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the description are explained below:
   </para>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      String matching the name
      in the URL used when creating the application by HTTP PUT
      or in the body when creating the application by HTTP POST.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resources"</literal></term>
    <listitem>
     <para>
      Strings specifying resource name patterns as in the following example:
     </para>

     <programlisting language="javascript">
{
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ]
}
     </programlisting>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"actions"</literal></term>
    <listitem>
     <para>
      Set of string action names,
      each set to a boolean indicating whether the action is allowed
      in the context of this application as in the following example:
     </para>

     <programlisting language="javascript">
{
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    }
}
     </programlisting>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"conditions"</literal></term>
    <listitem>
     <para>
      Condition types allowed in the context of this application.
     </para>

     <para>
      The following condition types are available:
     </para>

     <simplelist>
      <member><literal>"AND"</literal></member>
      <member><literal>"OR"</literal></member>
      <member><literal>"NOT"</literal></member>
      <member><literal>"AMIdentityMembership"</literal></member>
      <member><literal>"AuthLevel"</literal></member>
      <member><literal>"AuthScheme"</literal></member>
      <member><literal>"AuthenticateToRealm"</literal></member>
      <member><literal>"AuthenticateToService"</literal></member>
      <member><literal>"IPv4"</literal></member>
      <member><literal>"IPv6"</literal></member>
      <member><literal>"LDAPFilter"</literal></member>
      <member><literal>"LEAuthLevel"</literal></member>
      <member><literal>"OAuth2Scope"</literal></member>
      <member><literal>"ResourceEnvIP"</literal></member>
      <member><literal>"Session"</literal></member>
      <member><literal>"SessionProperty"</literal></member>
      <member><literal>"SimpleTime"</literal></member>
     </simplelist>

     <para>
      For more on condition types,
      see <xref linkend="rest-api-authz-policies" /> and
      <xref linkend="rest-api-authz-condition-types" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"realm"</literal></term>
    <listitem>
     <para>
      Name of the realm where this application is defined. You must specify the
      realm in the application resource JSON even though it can be derived from
      the URL that is used when creating the application using an HTTP PUT call.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"applicationType"</literal></term>
    <listitem>
     <para>
      Name of the application type used as a template for this application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"description"</literal></term>
    <listitem>
     <para>
      String describing the application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resourceComparator"</literal></term>
    <listitem>
     <para>
      Class name of the resource comparator implementation used
      in the context of this application.
     </para>

     <para>
      The following implementations are available:
     </para>

     <simplelist>
      <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
     </simplelist>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"subjects"</literal></term>
    <listitem>
     <para>
      Subject types allowed in the context of this application.
     </para>

     <para>
      The following subject types are available:
     </para>

     <simplelist>
      <member><literal>"AND"</literal></member>
      <member><literal>"OR"</literal></member>
      <member><literal>"NOT"</literal></member>
      <member><literal>"AuthenticatedUsers"</literal></member>
      <member><literal>"Identity"</literal></member>
      <member><literal>"JwtClaim"</literal></member>
      <member><literal>"NONE"</literal></member>
     </simplelist>

     <para>
      For more on subject types,
      see <xref linkend="rest-api-authz-policies" /> and
      <xref linkend="rest-api-authz-subject-types" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"entitlementCombiner"</literal></term>
    <listitem>
     <para>
      Name of the decision combiner, such as <literal>"DenyOverride"</literal>.
     </para>

     <para>
      For more on decision combiners,
      see <xref linkend="rest-api-authz-decision-combiners" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"saveIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for creating indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameIndexGenerator"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"searchIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for searching indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameSplitter"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"attributeNames"</literal></term>
    <listitem>
     <para>
      A list of attribute names such as
      <literal>cn</literal>.
      The list is used to aid policy indexing and lookup.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The examples above do not show the fields added by OpenAM
   to indicate when the application was created and last updated, and by whom.
   Those field are
   <literal>"createdBy"</literal> and <literal>"lastModifiedBy"</literal>,
   which take strings holding universal identifier DNs as their values,
   and <literal>"creationDate"</literal> and <literal>"lastModifiedDate"</literal>,
   which an integer number of seconds since the Unix epoch.
  </para>

  <section xml:id="rest-api-authz-applications-create">
   <title>Creating Applications</title>

   <para>
    To create an application definition,
    either perform an HTTP PUT indicating the full path to the resource
    and the name in the resource matching the name in the path,
    or perform an HTTP POST with the name to use specified in the resource.
   </para>

   <para>
    The HTTP PUT form includes the application definition
    as the JSON resource data,
    with the header <literal>Content-Type: application/json</literal>
    and uses the <literal>If-None-Match: *</literal> header.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
    <xinclude:fallback>
     Failed to include para-special-characters
    </xinclude:fallback>
   </xinclude:include>

   <programlisting>
$ <userinput>curl \
 --request PUT \
 --header "If-None-Match: *" \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "myApplication",
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ],
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    },
    "conditions": [
        "AND",
        "OR",
        "NOT",
        "AMIdentityMembership",
        "AuthLevel",
        "AuthScheme",
        "AuthenticateToRealm",
        "AuthenticateToService",
        "IPv4",
        "IPv6",
        "LDAPFilter",
        "LEAuthLevel",
        "OAuth2Scope",
        "ResourceEnvIP",
        "Session",
        "SessionProperty",
        "SimpleTime"
    ],
    "realm": "/",
    "applicationType": "iPlanetAMWebAgentService",
    "description": "An example application",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "AND",
        "OR",
        "NOT",
        "AuthenticatedUsers",
        "Identity",
        "JwtClaim"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}
' \
 https://openam.example.com:8443/openam/json/applications/myApplication</userinput>
<computeroutput>{
  "name" : "myApplication",
  "resources" : [
    "http://www.example.com:8080/*",
    "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "UPDATE" : true,
    "PATCH" : true,
    "QUERY" : true,
    "CREATE" : true,
    "DELETE" : true,
    "READ" : true,
    "ACTION" : true
  },
  "conditions": [
    "AND",
    "OR",
    "NOT",
    "AMIdentityMembership",
    "AuthLevel",
    "AuthScheme",
    "AuthenticateToRealm",
    "AuthenticateToService",
    "IPv4",
    "IPv6",
    "LDAPFilter",
    "LEAuthLevel",
    "OAuth2Scope",
    "ResourceEnvIP",
    "Session",
    "SessionProperty",
    "SimpleTime"
  ],
  "realm" : "/",
  "creationDate" : 1398761708295,
  "lastModifiedDate" : 1398761708295,
  "createdBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "iPlanetAMWebAgentService",
  "description" : "An example application",
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
    "AND",
    "OR",
    "NOT",
    "AuthenticatedUsers",
    "Identity",
    "JwtClaim"
  ],
  "entitlementCombiner" : "DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>

   <para>
    The HTTP POST form includes the application definition
    as the JSON resource data,
    with the header <literal>Content-Type: application/json</literal>
    and uses the <literal>_action=create</literal> operation.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "myApplication",
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ],
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    },
    "conditions": [
        "AND",
        "OR",
        "NOT",
        "AMIdentityMembership",
        "AuthLevel",
        "AuthScheme",
        "AuthenticateToRealm",
        "AuthenticateToService",
        "IPv4",
        "IPv6",
        "LDAPFilter",
        "LEAuthLevel",
        "OAuth2Scope",
        "ResourceEnvIP",
        "Session",
        "SessionProperty",
        "SimpleTime"
    ],
    "realm": "/",
    "applicationType": "iPlanetAMWebAgentService",
    "description": "An example application",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "AND",
        "OR",
        "NOT",
        "AuthenticatedUsers",
        "Identity",
        "JwtClaim"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}' \
 https://openam.example.com:8443/openam/json/applications/?_action=create</userinput>
<computeroutput>{
  "name" : "myApplication",
  "resources" : [
    "http://www.example.com:8080/*",
    "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "UPDATE" : true,
    "PATCH" : true,
    "QUERY" : true,
    "CREATE" : true,
    "DELETE" : true,
    "READ" : true,
    "ACTION" : true
  },
  "conditions": [
    "AND",
    "OR",
    "NOT",
    "AMIdentityMembership",
    "AuthLevel",
    "AuthScheme",
    "AuthenticateToRealm",
    "AuthenticateToService",
    "IPv4",
    "IPv6",
    "LDAPFilter",
    "LEAuthLevel",
    "OAuth2Scope",
    "ResourceEnvIP",
    "Session",
    "SessionProperty",
    "SimpleTime"
  ],
  "realm" : "/",
  "creationDate" : 1398762452667,
  "lastModifiedDate" : 1398762452667,
  "createdBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "iPlanetAMWebAgentService",
  "description" : "An example application",
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
    "AND",
    "OR",
    "NOT",
    "AuthenticatedUsers",
    "Identity",
    "JwtClaim"
  ],
  "entitlementCombiner" : "DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-applications-read">
   <title>Reading Applications</title>

   <para>
    To read an application definition, perform an HTTP GET
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applications/myApplication</userinput>
<computeroutput>{
  "name" : "myApplication",
  "resources" : [
    "http://www.example.com:8080/*",
    "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "POST" : true,
    "PATCH" : true,
    "GET" : true,
    "DELETE" : true,
    "OPTIONS" : true,
    "PUT" : true,
    "HEAD" : true
  },
  "conditions": [
    "AND",
    "OR",
    "NOT",
    "AMIdentityMembership",
    "AuthLevel",
    "AuthScheme",
    "AuthenticateToRealm",
    "AuthenticateToService",
    "IPv4",
    "IPv6",
    "LDAPFilter",
    "LEAuthLevel",
    "OAuth2Scope",
    "ResourceEnvIP",
    "Session",
    "SessionProperty",
    "SimpleTime"
  ],
  "realm" : "/",
  "creationDate" : 1398760362341,
  "lastModifiedDate" : 1398760362341,
  "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "iPlanetAMWebAgentService",
  "description" : null,
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
    "AND",
    "OR",
    "NOT",
    "AuthenticatedUsers",
    "Identity",
    "JwtClaim"
  ],
  "entitlementCombiner" : "DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-applications-update">
   <title>Updating Applications</title>

   <para>
    To update an application definition, perform an HTTP PUT
    specifying the resource name
    with the application definition as the JSON resource data,
    and with the header <literal>Content-Type: application/json</literal>.
    This is essentially the same as creating an application definition,
    but without the <literal>If-None-Match: *</literal> header.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "myApplication",
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ],
    "actions": {
        "UPDATE": false,
        "PATCH": false,
        "QUERY": true,
        "CREATE": false,
        "DELETE": false,
        "READ": true,
        "ACTION": false
    },
    "conditions": [
        "SimpleTime"
    ],
    "realm": "/",
    "applicationType": "iPlanetAMWebAgentService",
    "description": "Updated application with fewer conditions and subjects",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "AuthenticatedUsers",
        "JwtClaim"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}' \
 https://openam.example.com:8443/openam/json/applications/myApplication</userinput>
<computeroutput>{
  "name" : "myApplication",
  "resources" : [
    "http://www.example.com:8080/*",
    "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "UPDATE" : false,
    "PATCH" : false,
    "QUERY" : true,
    "CREATE" : false,
    "DELETE" : false,
    "READ" : true,
    "ACTION" : false
  },
  "conditions" : [
    "SimpleTime"
  ],
  "realm" : "/",
  "creationDate" : 1398762194628,
  "lastModifiedDate" : 1398762194628,
  "createdBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "iPlanetAMWebAgentService",
  "description" : "Updated application with fewer conditions and subjects",
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
    "AuthenticatedUsers",
    "JwtClaim"
  ],
  "entitlementCombiner" : "DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-applications-delete">
   <title>Deleting Applications</title>

   <para>
    To delete an application definition, perform an HTTP DELETE
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --request DELETE \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applications/myApplication</userinput>
<computeroutput>{}</computeroutput>
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-applications-query">
   <title>Listing Applications</title>

   <para>
    To list application definitions, perform an HTTP GET on the endpoint,
    setting the <literal>_queryFilter</literal> query string parameter.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applications?_queryFilter=true
   </userinput>
<computeroutput>{
  "result" : [ {
    "name" : "myApplication",
    "resources" : [
      "http://www.example.com:8080/*",
      "http://www.example.com:8080/*?*"
    ],
    "actions" : {
      "POST" : true,
      "PATCH" : true,
      "GET" : true,
      "DELETE" : true,
      "OPTIONS" : true,
      "PUT" : true,
      "HEAD" : true
    },
    "conditions" : [
      "SimpleTime"
    ],
    "attributeNames" : [
    ],
    "realm":"/",
    "creationDate":1416428109115,
    "lastModifiedDate":1416428109115,
    "lastModifiedBy":"id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "subjects":[
      "JwtClaim",
      "AuthenticateUsers"
    ],
    "description":"Updated application with fewer conditions and subjects",
    "createdBy":id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "applicationType":"iPlanetAMWebServices",
    "entitlementCombiner":"DenyOverride",
    },
  ],
  "resultCount":1,
  "pagedResultsCookie":null,
  "remainingPagedResults":0
}</computeroutput>
   </programlisting>

   <para>
    The <literal>_queryFilter</literal> parameter can take
    <literal>true</literal> to match every policy,
    <literal>false</literal> to match no policies,
    or a filter of the following form to match field values:
    <literal><replaceable>field</replaceable> <replaceable>operator</replaceable>
    <replaceable>value</replaceable></literal>
    where <replaceable>field</replaceable> represents the field name,
    <replaceable>operator</replaceable> is the operator code,
    <replaceable>value</replaceable> is the value to match,
    and the entire filter is URL-encoded.
    Supported operators are as follows:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>eq</literal>: equals (for matching strings)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>ge</literal>: greater than or equal to (for matching integers)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>gt</literal>: greater than (for matching integers)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>le</literal>: less than or equal to (for matching integers)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>lt</literal>: less than (for matching integers)
     </para>
    </listitem>
   </itemizedlist>

   <itemizedlist>
    <para>
     The <literal><replaceable>field</replaceable></literal> value
     can take the following values:
    </para>

    <listitem>
     <para>
      <literal>"name"</literal> (string)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"description"</literal> (string)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"createdBy"</literal> (string)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"creationDate"</literal> (date)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"lastModifiedBy"</literal> (string)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"lastModifiedDate"</literal> (date)
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The String fields only support the <literal>eq</literal> operator, which is
    implemented using regular expression pattern matching.
   </para>

   <para>
    The Date files support the <literal>eq</literal>, <literal>ge</literal>,
    <literal>gt</literal>, <literal>le</literal>, and <literal>lt</literal>
    operators. The implementation of <literal>eq</literal> for the Date fields
    do not use regular expression pattern matching.
   </para>

   <para>
    Filters can be composed of multiple expressions
    by a using boolean operator <literal>AND</literal>,
    and by using parentheses,
    <literal>(<replaceable>expression</replaceable>)</literal>,
    to group expressions.
    You must URL encode the filter expression
    in <literal>_queryFilter=<replaceable>filter</replaceable></literal>.
   </para>

   <para>
    Since regular expressions are implemented for some operators, you can specify
    a filter that can include or exclude specified elements. For example,
    the following query searches for application names containing 'iPlanet'.
    The <literal>queryFilter</literal> string is URL-encoded.
   </para>

   <programlisting>
$ <userinput>curl --header "iPlanetDirectoryPro" AQIC5..." \
https://openam.example.com:8443/openam/json/applications?_queryFilter=name%20eq%20%22iPlanet.*%22</userinput>
   </programlisting>

   <note><para>While some operators use regular expressions as its underlying
    mechanism, CREST endpoints do not use regular expressions.
   </para></note>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>

   <para>
    You can use <literal>_pageSize=<replaceable>integer</replaceable></literal>
    to limit the number of results returned.
   </para>

  </section>
 </section>

 <section xml:id="rest-api-authz-application-types">
  <title>Viewing Application Types</title>

  <para>
   Application types act as templates for creating applications.
  </para>

  <para>
   The default application type that represents web resources
   is <literal>iPlanetAMWebAgentService</literal>,
   which defines resources as URL patterns and actions as HTTP methods.
   OpenAM policy agents use a default application type based on this type,
   which is called <literal>iPlanetAMWebAgentService</literal>.
   This is the application type for policies
   that you edit through OpenAM console.
  </para>

  <para>
   OpenAM supports other application types as well, such as CREST types,
   that you can manage over the policy REST endpoints.
  </para>

  <para>
   Applications types are server-wide, and do not differ by realm.
   Hence the URI for the application types API
   does not contain a realm component,
   but is <literal>/json/applicationtypes</literal>.
  </para>

  <para>
   Application type resources are represented in JSON and take the following form.
   Application type resources are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

  <programlisting language="javascript">
{
  "name": "application type name string",
  "actions": {
     "action name string": true,
     "other action name string": false,
     ...
  },
  "resourceComparator": "resource comparator class name",
  "saveIndex": "save index class name",
  "searchIndex": "search index class name",
  "applicationClassName": "com.sun.identity.entitlement.Application"
}
  </programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the description are explained below:
   </para>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      String matching the name
      in the URL used when creating the application type by HTTP PUT
      or in the body when creating the application type by HTTP POST.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"actions"</literal></term>
    <listitem>
     <para>
      Set of string action names,
      each set to a boolean indicating whether the action is allowed
      as in the following example:
     </para>

     <programlisting language="javascript">
{
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    }
}
     </programlisting>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resourceComparator"</literal></term>
    <listitem>
     <para>
      Class name of the resource comparator implementation used
      in the context of this application.
     </para>

     <para>
      The following implementations are available:
     </para>

     <simplelist>
      <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
     </simplelist>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"saveIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for creating indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameIndexGenerator"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"searchIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for searching indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameSplitter"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"applicationClassName"</literal></term>
    <listitem>
     <para>
      Class name of the application implementation,
      such as <literal>"com.sun.identity.entitlement.Application"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="rest-api-authz-application-types-read">
   <title>Reading Application Types</title>

   <para>
    To read an application type, perform an HTTP GET
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applicationtypes/crestPolicyService</userinput>
<computeroutput>{
  "name" : "crestPolicyService",
  "actions" : {
    "UPDATE" : true,
    "PATCH" : true,
    "QUERY" : true,
    "CREATE" : true,
    "DELETE" : true,
    "READ" : true,
    "ACTION" : true
  },
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "saveIndex" : "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
  "searchIndex" : "org.forgerock.openam.entitlement.indextree.TreeSearchIndex",
  "applicationClassName" : "com.sun.identity.entitlement.Application"
}
</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-application-types-query">
   <title>Listing Application Types</title>

   <para>
    To list application types, perform an HTTP GET on the endpoint,
    setting the <literal>_queryFilter</literal> query string parameter
    as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applicationtypes?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ... application types ... ],
  "resultCount" : 8,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
   </programlisting>
  </section>
 </section>

 <section xml:id="rest-api-authz-condition-types">
  <title>Viewing Environment Condition Types</title>

  <para>
   Environment condition types describe the JSON representation
   of environment conditions that you can use in policy definitions.
  </para>

  <para>
   Environment condition types are server-wide, and do not differ by realm.
   Hence the URI for the condition types API
   does not contain a realm component,
   but is <literal>/json/conditiontypes</literal>.
  </para>

  <section xml:id="rest-api-authz-condition-types-read">
   <title>Reading Environment Condition Types</title>

   <para>
    To read a environment condition type, perform an HTTP GET
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <para>
    You can use the query string parameter
    <literal>_prettyPrint=true</literal> to make the output easier to read.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/conditiontypes/IPv4</userinput>
<computeroutput>{
  "title" : "IPv4",
  "logical" : false,
  "config" : {
    "type" : "object",
    "properties" : {
      "startIp" : {
        "type" : "string"
      },
      "endIp" : {
        "type" : "string"
      },
      "dnsName" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      }
    }
  }
}</computeroutput>
   </programlisting>

   <para>
    Notice that the environment condition type has a title,
    a "logical" field
    that indicates whether the type is a logical operator or takes a predicate,
    and a configuration specification.
    The configuration specification in this case indicates
    that an IPv4 environment condition has two properties, "startIp" and "endIp",
    that each take a single string value, and a third property, "dnsName," that
    takes an array of string values.
    In other words, a concrete IP environment condition specification
    without a DNS name constraint
    could be represented in a policy definition as in the following example:
   </para>

   <programlisting language="javascript">
{
   "type": "IPv4",
   "startIp": "127.0.0.1",
   "endIp": "127.0.0.255"
}
   </programlisting>

   <para>
    The configuration is what differs the most across environment condition types.
    The NOT condition, for example, takes a single condition object
    as the body of its configuration.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/conditiontypes
    /NOT</userinput>
<computeroutput>{
  "title" : "NOT",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "condition" : {
        "type" : "object",
        "properties" : {
        }
      }
    }
  }
}</computeroutput>
   </programlisting>

   <para>
    The concrete NOT condition therefore takes the following form.
   </para>

   <programlisting language="javascript">
{
    "type": "NOT",
    "condition": {
        ...
    }
}
   </programlisting>

   <para>
    The OR condition takes an array of conditions.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/conditiontypes/OR</userinput>
<computeroutput>{
  "title" : "OR",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "conditions" : {
        "type" : "array",
        "items" : {
          "type" : "any"
        }
      }
    }
  }
}</computeroutput>
   </programlisting>

   <para>
    A corresponding concrete OR condition thus takes the following form.
   </para>


   <programlisting language="javascript">
{
    "type": "OR",
    "conditions": [
        {
            ...
        },
        {
            ...
        },
        ...
    ]
}
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-condition-types-query">
   <title>Listing Environment Condition Types</title>

   <para>
    To list all environment condition types, perform an HTTP GET on the endpoint,
    setting the query string parameter, <literal>_queryFilter=true</literal>,
    as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/conditiontypes?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ... condition types ... ],
  "resultCount" : 18,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 0
}</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameter
    <literal>_prettyPrint=true</literal> to make the output easier to read.
   </para>
  </section>
 </section>

 <section xml:id="rest-api-authz-subject-types">
  <title>Viewing Subject Condition Types</title>

  <para>
   Subject types describe the JSON representation
   of subject conditions that you can use in policy definitions.
  </para>

  <para>
   Subject condition types are server-wide, and do not differ by realm.
   Hence the URI for the subject types API
   does not contain a realm component,
   but is <literal>/json/subjecttypes</literal>.
  </para>

  <section xml:id="rest-api-authz-subject-types-read">
   <title>Reading Subject Condition Types</title>

   <para>
    To read a subject condition type, perform an HTTP GET
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <para>
    You can use the query string parameter
    <literal>_prettyPrint=true</literal> to make the output easier to read.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/Identity</userinput>
<computeroutput>{
  "title" : "Identity",
  "logical" : false,
  "config" : {
    "type" : "object",
    "properties" : {
      "subjectValues" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      }
    }
  }
}</computeroutput>
   </programlisting>

   <para>
    Notice that the subject type has a title,
    a "logical" field
    that indicates whether the type is a logical operator or takes a predicate,
    and a configuration specification.
    The configuration specification in this case indicates
    that an Identity subject condition has one property,
    "subjectValues", which takes an array of string values.
    In other words, a concrete Identity subject condition specification
    is represented in a policy definition as in the following example:
   </para>

   <programlisting language="javascript">
{
   "type": "Identity",
   "subjectValues": [
       "uid=scarter,ou=People,dc=example,dc=com"
   ]
}
   </programlisting>

   <para>
    The configuration is what differs the most across subject condition types.
    The AND condition, for example, takes an array of subject condition objects
    as the body of its configuration.
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/AND</userinput>
<computeroutput>{
  "title" : "AND",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "subjects" : {
        "type" : "array",
        "items" : {
          "type" : "any"
        }
      }
    }
  }
}</computeroutput>
   </programlisting>

   <para>
    The concrete AND subject condition therefore takes the following form.
   </para>

   <programlisting language="javascript">
{
    "type": "AND",
    "subject": [
      {
        ...
      },
      ...
    ]
}
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-subject-types-query">
   <title>Listing Subject Condition Types</title>

   <para>
    To list all subject condition types, perform an HTTP GET on the endpoint,
    setting the query string parameter, <literal>_queryFilter=true</literal>,
    as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ... subject types ... ],
  "resultCount" : 8,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 0
}</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameter
    <literal>_prettyPrint=true</literal> to make the output easier to read.
   </para>
  </section>
 </section>

<section xml:id="rest-api-authz-subject-attributes">
  <title>Viewing Subject Attributes</title>

  <para>
   When you define a policy subject condition, the condition can depend on values
   of subject attributes stored in a user's profile. The list of possible subject
   attributes that you can use depends on the LDAP User Attributes configured for
   the Identity data store where OpenAM looks up the user's profile.
  </para>
  <para>
   Subject attributes derive from the list of LDAP user attributes configured
   for the Identity data store. For more information, see
   <link xlink:show="new"
         xlink:href="admin-guide#config-data-store"
         xlink:role="http://docbook.org/xlink/role/olink">Configuring Data Stores</link>.

  </para>
  <para>
   You can get a listing of all subject attribute
   names using the <literal>/json/subjectattributes/?_queryFilter=true</literal>
   command on the endpoint.
   There are no restrictions on the search and no pagination cookie is set.
   The subject
   attribute names are all returned as one in a "result" array.
  </para>

  <programlisting>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  https://openam.example.com:8443/openam/json/subjectattributes/?_queryFilter=true</userinput>
<computeroutput>
{
 "result" : [ ... subject attribute types ... ],
 "resultCount": 87,
 "pagedResultsCookie": null,
 "remainingPagedResults": 0
}
</computeroutput>
  </programlisting>
 </section>

 <section xml:id="rest-api-authz-decision-combiners">
  <title>Viewing Decision Combiners</title>

  <para>
   Decision combiners describe how to resolve policy decisions
   when multiple policies apply.
  </para>

  <para>
   Decision combiners are server-wide, and do not differ by realm.
   Hence the URI for the condition types API
   does not contain a realm component,
   but is <literal>/json/decisioncombiners</literal>.
  </para>

  <para>
   To list all decision combiners, perform an HTTP GET on the endpoint,
   setting the query string parameter, <literal>_queryFilter=true</literal>,
   as in the following example:
  </para>

  <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/decisioncombiners/?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ {
    "title" : "DenyOverride"
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 0
}</computeroutput>
  </programlisting>

  <para>
   You can use the query string parameter
   <literal>_prettyPrint=true</literal> to make the output easier to read.
  </para>

  <para>
   To view an individual decision combiner, perform an HTTP GET on its resource.
  </para>

  <programlisting>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/decisioncombiners/DenyOverride</userinput>
<computeroutput>{
  "title" : "DenyOverride"
}</computeroutput>
  </programlisting>
 </section>

 <section xml:id="rest-api-authz-referrals">
  <title>Managing Referrals</title>

  <para>
   Referrals are represented in JSON. They
   use standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>) as follows:
  </para>

  <programlisting language="javascript">
   {
     "name": "MyReferral",
     "description": "Look for policies in two additional subrealms to protect HR pages",
     "resources": {
       "iPlanetAMWebAgentService" : [ "http://example.com/hr/*"]
     },
     "realms" : ["/MySubrealm", "/MySubrealm/ChildSubrealm"]
   }
  </programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the example are explained below:
   </para>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      String matching the name
      in the URL used when creating the referral by HTTP PUT
      or in the body when creating the referral by HTTP POST.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"description"</literal></term>
    <listitem>
     <para>
      String describing the referral.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resources"</literal></term>
    <listitem>
     <para>
      The application and resource pattern strings
      to which the referral applies.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"realms"</literal></term>
    <listitem>
     <para>
      One or more realms to search for policies that might protect
      the resource.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="rest-api-authz-referrals-create">
   <title>Creating Referrals</title>

   <para>
    To create a referral,
    either perform an HTTP PUT indicating the full path to the resource
    and the name in the resource matching the name in the path,
    or perform an HTTP POST with the name to use specified in the resource.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
    <xinclude:fallback>
     Failed to include para-special-characters
    </xinclude:fallback>
   </xinclude:include>

   <para>
    The HTTP PUT form includes the referral definition as the JSON resource data,
    with the header <literal>Content-Type: application/json</literal>
    and uses the <literal>If-None-Match: *</literal> header.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <para>
    The following example creates a referral named <literal>MyReferral</literal>
    in the top-level realm. The referral causes OpenAM policy evaluation to
    search for policies defined in the <literal>/MySubrealm</literal> and
    <literal>/MySubrealm/ChildSubrealms</literal> realms
    that have application type <literal>iPlanetAMWebAgentService</literal> and
    protect pages under <literal>http://example.com/hr/</literal>.
   </para>


   <programlisting>
    $ <userinput>curl \
    --request PUT \
    --header "iPlanetDirectoryPro: AQIC5w..." \
    --header "If-None-Match: *" \
    --header "Content-Type: application/json" \
    --data '{
      "name": "MyReferral",
      "description": "Look for policies in two additional subrealms to protect HR pages",
      "resources": {
        "iPlanetAMWebAgentService" : [ "http://example.com/hr/*"]
      },
      "realms" : ["/MySubrealm", "/MySubrealm/ChildSubrealm"]
    }' \
    https://openam.example.com:8443/openam/json/referrals/MyReferral
   </userinput>
    <computeroutput>{
     "creationDate" : 1416956012949,
     "lastModifiedDate" : 1416956012949,
     "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
     "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "resources" : {
       "iPlanetAMWebAgentService" : [ "http://example.com/hr/*" ]
     },
     "name" : "MyReferral"
    }</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>
    [,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>

   <para>
    The HTTP POST form includes the referral definition as the JSON resource data,
    with the header <literal>Content-Type: application/json</literal>
    and uses the <literal>_action=create</literal> operation.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
    $ <userinput>curl \
    --request POST \
    --header "iPlanetDirectoryPro: AQIC5..." \
    --header "Content-Type: application/json" \
    --data '{
      "name": "MyReferralTwo",
      "description": "Look for policies in two additional subrealms to protect IT pages",
      "resources": {
        "iPlanetAMWebAgentService" : [ "http://example.com/it/*"]
      },
      "realms" : ["/MySubrealm", "/MySubrealm/ChildSubrealm"]
    }' \
    https://openam.example.com:8443/openam/json/referrals?_action=create
   </userinput>
   <computeroutput>
   {
     "creationDate" : 1416956884965,
     "lastModifiedDate" : 1416956884965,
     "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
     "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "resources" : {
       "iPlanetAMWebAgentService" : [ "http://example.com/it/*" ]
     },
     "name" : "MyReferralTwo"
   }
   </computeroutput>
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-referrals-read">
   <title>Reading Referrals</title>

   <para>
    To read a referral definition, perform an HTTP GET
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
    $ <userinput>curl \
    --header "iPlanetDirectoryPro: AQIC5..." \
    https://openam.example.com:8443/openam/json/referrals/MyReferral
   </userinput>
   <computeroutput>
   {
     "creationDate" : 1416956012949,
     "lastModifiedDate" : 1416956012949,
     "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
     "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "resources" : {
       "iPlanetAMWebAgentService" : [ "http://example.com/hr/*" ]
     },
     "name" : "MyReferral"
   }</computeroutput>
   </programlisting>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>
    [,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-referrals-update">
   <title>Updating Referrals</title>

   <para>
    To update a referral, perform an HTTP PUT
    specifying the resource name
    with the referral definition as the JSON resource data,
    and with the header <literal>Content-Type: application/json</literal>.
    This is essentially the same as creating a referral,
    but without the <literal>If-None-Match: *</literal> header.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
    $ <userinput>curl \
    --request PUT \
    --header "iPlanetDirectoryPro: AQIC5w..." \
    --header "Content-Type: application/json" \
    --data '{
      "name": "MyReferral",
      "description": "Update referral to protect HR US pages only",
      "resources": {
        "iPlanetAMWebAgentService" : [ "http://example.com/hr/us/*"]
      },
      "realms" : ["/MySubrealm", "/MySubrealm/ChildSubrealm"]
    }' \
    https://openam.example.com:8443/openam/json/referrals/MyReferral
   </userinput>
   <computeroutput>
   {
     "creationDate" : 1416959024216,
     "lastModifiedDate" : 1416959024216,
     "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
     "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
     "resources" : {
       "iPlanetAMWebAgentService" : [ "http://example.com/hr/us/*" ]
     },
     "name" : "MyReferral"
   }
   </computeroutput>
   </programlisting>

   <tip><para>You can rename a referral by sending a new value in the
    <emphasis>name</emphasis> attribute of the JSON body,
    as shown below.</para>

    <programlisting>
     $ <userinput>curl \
     --request PUT \
     --header "iPlanetDirectoryPro: AQIC5w..." \
     --header "Content-Type: application/json" \
     --data '{
       "name": "MyReferralHRUS",
       "description": "Update referral to protect HR US pages only",
       "resources": {
         "iPlanetAMWebAgentService" : [ "http://example.com/hr/us/*"]
       },
       "realms" : ["/MySubrealm", "/MySubrealm/ChildSubrealm"]
     }' \
     https://openam.example.com:8443/openam/json/referrals/MyReferral
    </userinput>
    <computeroutput>
    {
      "creationDate" : 1416959240491,
      "lastModifiedDate" : 1416959240491,
      "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
      "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
      "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
      "resources" : {
        "iPlanetAMWebAgentService" : [ "http://example.com/hr/us/*" ]
      },
      "name" : "MyReferralHRUS"
    }</computeroutput>
    </programlisting></tip>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>
    [,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-referrals-delete">
   <title>Deleting Referrals</title>

   <para>
    To delete a referral, perform an HTTP DELETE
    specifying the resource name.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <programlisting>
    $ <userinput>curl \
    --header "iPlanetDirectoryPro: AQIC5w..." \
    --request DELETE \
    https://openam.example.com:8443/openam/json/referrals/MyReferralHRUS</userinput>
    <computeroutput>{}</computeroutput>
   </programlisting>
  </section>

  <section xml:id="rest-api-authz-referrals-query">
   <title>Listing Referrals</title>

   <para>
    To list referrals, perform an HTTP GET on the endpoint, setting
    the <literal>_queryFilter</literal> query string parameter.
   </para>

   <programlisting>
    $ <userinput>curl \
    --header "iPlanetDirectoryPro: AQIC5w..." \
    https://openam.example.com:8443/openam/json/referrals?_queryFilter=true
   </userinput>
   <computeroutput>
   {
     "result" : [ {
       "creationDate" : 1416956689230,
       "lastModifiedDate" : 1416956689230,
       "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
       "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
       "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
       "resources" : {
         "iPlanetAMWebAgentService" : [ "http://example.com/it/*" ]
       },
       "name" : "MyReferralOne"
       }, {
       "creationDate" : 1416956884965,
       "lastModifiedDate" : 1416956884965,
       "realms" : [ "/MySubrealm", "/MySubrealm/ChildSubrealm" ],
       "createdBy" : "id=amadmin,ou=user,dc=example,dc=com",
       "lastModifiedBy" : "id=amadmin,ou=user,dc=example,dc=com",
       "resources" : {
         "iPlanetAMWebAgentService" : [ "http://example.com/finance/*" ]
       },
       "name" : "MyReferralTwo"
     } ],
     "resultCount" : 2,
     "pagedResultsCookie" : null,
     "remainingPagedResults" : 2
   }
   </computeroutput>
   </programlisting>

   <para>
    The <literal>_queryFilter</literal> parameter can take
    <literal>true</literal> to match every referral,
    <literal>false</literal> to match no referrals,
    or a filter of the following form to match field values:
    <literal><replaceable>field</replaceable> <replaceable>operator</replaceable> <replaceable>value</replaceable></literal>
    where <replaceable>field</replaceable> represents the field name,
    <replaceable>operator</replaceable> is the operator code,
    <replaceable>value</replaceable> is the value to match,
    and the entire filter is URL-encoded.
    Supported operators are as follows:
   </para>

   <itemizedlist>
    <!-- Not supported
          <listitem>
           <para>
            <literal>co</literal>: contains
           </para>
          </listitem>
    -->

    <listitem>
     <para>
      <literal>eq</literal>: equals
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>ge</literal>: greater than or equal to
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>gt</literal>: greater than
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>le</literal>: less than or equal to
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>lt</literal>: less than
     </para>
    </listitem>

    <!-- Not supported
          <listitem>
           <para>
            <literal>pr</literal>: exists, is present
           </para>

           <para>
            Do not set a <replaceable>value</replaceable> when using this operator.
           </para>
          </listitem>

          <listitem>
           <para>
            <literal>sw</literal>: starts with
           </para>
          </listitem>
    -->
   </itemizedlist>

   <itemizedlist>
    <para>
     The <literal><replaceable>field</replaceable></literal> value
     can take the following values:
    </para>

    <listitem>
     <para>
      <literal>"name"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"description"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"applicationName"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"createdBy"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"lastModifiedBy"</literal> (string equality only)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"creationDate"</literal> (all comparisons are supported;
      the date is either an
      <link xlink:show="new"
            xlink:href="http://www.w3.org/TR/NOTE-datetime">ISO-8601</link>
      string, or a integer number of seconds from the UNIX epoch)
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>"lastModifiedDate"</literal> (all comparisons are supported;
      the date is either an
      <link xlink:show="new"
            xlink:href="http://www.w3.org/TR/NOTE-datetime">ISO-8601</link>
      string, or a integer number of seconds from the UNIX epoch)
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Filters can be composed of multiple expressions
    by a using boolean operator
    <literal>AND</literal>,
    <!-- Not supported: <literal>OR</literal>, or <literal>!</literal> (NOT),-->
    and by using parentheses,
    <literal>(<replaceable>expression</replaceable>)</literal>,
    to group expressions.
    You must URL encode the filter expression
    in <literal>_queryFilter=<replaceable>filter</replaceable></literal>.
   </para>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>

   <para>
    You can use <literal>_pageSize=<replaceable>integer</replaceable></literal>
    to limit the number of results returned.
   </para>

   <para>
    You can use <literal>_sortKeys=[+-]<replaceable>field</replaceable>[,<replaceable>field</replaceable>...]</literal>
    to sort the results returned,
    where <replaceable>field</replaceable> represents a field
    in the JSON referral objects returned.
    Optionally use the <literal>+</literal> prefix to sort in ascending order
    (the default),
    or <literal>-</literal> to sort in descending order.
    The following example sorts the referrals by their names in descending order.
   </para>

   <programlisting>
    $ <userinput>curl \
    --header "iPlanetDirectoryPro: AQIC5w..." \
    https://openam.example.com:8443/openam/json/referrals?_queryFilter=true\&amp;_sortKeys=-name</userinput>
    <computeroutput>
    {
      "result" : [ {
        "name" : "MyReferralTwo"
       }, {
         "name" : "MyReferralOne"
       } ],
       "resultCount" : 2,
       "pagedResultsCookie" : null,
       "remainingPagedResults" : 2
     }
    </computeroutput>
   </programlisting>
  </section>
 </section>

 <section xml:id="rest-api-authz-legacy">
  <title>Authorization (Legacy API)</title>

  <para>You can call on OpenAM to decide whether to authorize access to a
   protected resource based on a valid token. Of course, you must percent
   encode the resource URI.
  </para>

  <para>Interface Stability:
   <link xlink:show="new"
         xlink:href="admin-guide#interface-stability"
         xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link>
  </para>

  <programlisting>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/authorize?\
uri=http%3A%2F%2Fwww.example.com%3A8080%2Fexamples%2Findex.html\
&amp;subjectid=AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*"</userinput>
<computeroutput>boolean=true</computeroutput>
  </programlisting>

  <para>
   To indicate access denied, OpenAM returns
   <literal>boolean=false</literal>.
  </para>

  <section xml:id="rest-api-policy-decisions">
   <title>Requesting Policy Decisions (Legacy API)</title>

   <para>OpenAM provides additional REST APIs for requesting policy
    decisions.
   </para>

     <!-- Pending replacement
     <para>Interface Stability: <link xlink:show="new"
     xlink:href="admin-guide#interface-stability"
     xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>-->

   <itemizedlist>
    <para>The policy decision interfaces use the following path suffixes and
     query string parameters.
    </para>

    <para>
     Path suffixes for policy decision requests include the following:
    </para>

    <listitem>
     <para><literal>ws/1/entitlement/decision</literal>. Request a decision
      pertaining to a single resource.</para>
    </listitem>

    <listitem>
     <para><literal>ws/1/entitlement/decisions</literal>. Request decisions
     pertaining to multiple resources.</para>
    </listitem>

    <listitem>
     <para>
      <literal>ws/1/entitlement/entitlement</literal>. Request decisions
      for a specified resource URL.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>ws/1/entitlement/entitlements</literal>. Request decisions
      for a specified resource URL and all resources underneath.
     </para>
    </listitem>
   </itemizedlist>

   <itemizedlist>
    <para>
     Query string parameters for policy decision requests include the
     following.
    </para>

    <listitem>
     <para><literal>subject=<replaceable>encoded-token</replaceable></literal>,
      where the token is encoded using the method implemented in
      <link xlink:show="new"
      xlink:href="http://sources.forgerock.org/browse/~raw,r=6/openam/trunk/opensso/www/public/use/docs/fampdf/Encoder.java"
      ><filename>Encoder.java</filename></link>.
     </para>

     <para>
      In the examples for this section, the token ID obtained during
      authentication for <literal>amadmin</literal> is abbreviated as
      <literal>AQIC5...DU3*</literal> and the encoded token ID for the subject
      is <literal>MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>action=get</literal>, or <literal>action=post</literal>,
      which identifies the user agent action when requesting a decision.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>application=iPlanetAMWebAgentService</literal>
      or <literal>application=crestPolicyService</literal>
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>resource=<replaceable>resource-url</replaceable></literal>,
     or multiple <literal>resources=<replaceable>resource-url</replaceable></literal>
     parameters for multiple decisions.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>env=<replaceable>requestDnsName%3Dfqdn</replaceable></literal>,
      <literal>env=<replaceable>requestIP%3Ddotted-quads</replaceable></literal>,
      <literal>env=<replaceable>requestTime%3Dseconds-since-epoch</replaceable></literal>,
      and <literal>env=<replaceable>requestDnsName%3Dtime-zone</replaceable></literal>
      where <replaceable>time-zone</replaceable> is from Java
      <literal>TimeZone.getTimeZone().getID()</literal>. The
      <literal>env</literal> parameters thus express conditions.
     </para>

     <para>
      In order to express a condition that specifies OAuth 2.0 scopes,
      set the value of the parameter
      to <literal>scope=<replaceable>scopes</replaceable></literal>.
      To set scopes to <literal>openid</literal> and <literal>profile</literal>,
      use <literal>env=scope%3Dopenid%20profile</literal> for example.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Authentication for these interfaces uses cookies, so if your
    application is not running in a browser, first authenticate as described in
    <link xlink:show="new"
          xlink:href="dev-guide#rest-api-auth-json"
          xlink:role="http://docbook.org/xlink/role/olink"
    >REST APIs for Authentication &amp; Logout</link>.
   </para>

   <para>
    To request a decision for a single resource, use an HTTP GET on
    <literal>/ws/1/entitlement/decision</literal> as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/decision\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=&amp;action=GET\
&amp;application=iPlanetAMWebAgentService\
&amp;resource=http%3A%2F%2Fwww.example.com%2Findex.html"</userinput>
<computeroutput>allow</computeroutput>
   </programlisting>

   <para>
    If access is denied, the result is <literal>deny</literal>.
   </para>

   <para>
    To request decisions for multiple resources, use an HTTP GET on
     <literal>/ws/1/entitlement/decisions</literal> as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/decisions\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=&amp;action=GET\
&amp;application=iPlanetAMWebAgentService\
&amp;resources=http%3A%2F%2Fwww.example.com%2Findex.html\
&amp;resources=http%3A%2F%2Fwww.example.com%2Ffavicon.ico"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "attributes": {},
                "advices": {},
                "resourceName": "http://www.example.com:80/index.html"
            },
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "attributes": {},
                "advices": {},
                "resourceName": "http://www.example.com:80/favicon.ico"
            }
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
   </programlisting>

   <para>
    To request decisions for a given resource,
    use an HTTP GET on <literal>/ws/1/entitlement/entitlement</literal>
    as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/entitlement\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=\
&amp;application=iPlanetAMWebAgentService\
&amp;resource=http%3A%2F%2Fwww.example.com%2F*"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "actionsValues": {
            "POST": true,
            "GET": true
        },
        "attributes": {},
        "advices": {},
        "resourceName": "http://www.example.com:80/*"
    },
    "statusMessage": "OK"
}</computeroutput>
   </programlisting>

   <para>
    To request decisions for all resources underneath a given resource,
    use an HTTP GET on <literal>/ws/1/entitlement/entitlements</literal>
    as in the following example:
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/entitlements\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=\
&amp;application=iPlanetAMWebAgentService\
&amp;resource=http%3A%2F%2Fwww.example.com%2F"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            {
                "actionsValues": {},
                "resourceName": "http://www.example.com:80/"
            },
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "advices": {},
                "resourceName": "http://www.example.com:80/*"
            },
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "attributes": {},
                "advices": {},
                "resourceName": "http://www.example.com:80/*?*"
            }
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
   </programlisting>
  </section>
 </section>

 <section xml:id="rest-api-policy-management">
  <title>Managing Policies (Legacy API)</title>

  <para>
   OpenAM exposes a REST API through the
   <literal>/ws/1/entitlement/privilege</literal> endpoint under the
   deployment URI. The API lets you create, read, update, delete, and query
   policies.
  </para>

  <para>
   Authentication for these interfaces uses cookies, so if your
   application is not running in a browser, first authenticate as described in
   <link xlink:show="new"
         xlink:href="dev-guide#rest-api-auth-json"
         xlink:role="http://docbook.org/xlink/role/olink"
   >REST APIs for Authentication &amp; Logout</link>.
  </para>
 </section>

 <section xml:id="rest-api-policy-management-create">
   <title>Creating Policies (Legacy API)</title>

   <para>
    You create a policy by using an HTTP POST of the JSON representation
    to the endpoint. You must URL encode the JSON before passing it to
    OpenAM.
   </para>

   <programlisting>
$ <userinput>cat entitlement.json</userinput>
<computeroutput>{
    "name": "Example HTTP",
    "eSubject": {
        "state": {
            "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
            "exclusive": false,
            "name": "All Authenticated Users",
            "values": []
        },
        "className": "com.sun.identity.entitlement.opensso.PolicySubject"
    },
    "entitlement": {
        "actionsValues": {
            "POST": true,
            "GET": true
        },
        "applicationName": "iPlanetAMWebAgentService",
        "name": "authorize",
        "resourceNames": [
            "http://www.example.com:80/*"
        ]
    }
}</computeroutput>
$ <userinput>curl \
 --request POST \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 --data-urlencode "privilege.json@entitlement.json" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege</userinput>
<computeroutput>{"statusCode":201,"body":"Created","statusMessage":"Created"}</computeroutput>

$ <userinput>cat entitlement2.json</userinput>
<computeroutput>{
    "name": "Example HTTPS",
    "eSubject": {
        "state": {
            "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
            "exclusive": false,
            "name": "All Authenticated Users",
            "values": []
        },
        "className": "com.sun.identity.entitlement.opensso.PolicySubject"
    },
    "entitlement": {
        "actionsValues": {
            "POST": false,
            "GET": true
        },
        "applicationName": "iPlanetAMWebAgentService",
        "name": "authorize",
        "resourceNames": [
            "https://www.example.com:443/*?*"
        ]
    }
}</computeroutput>

$ <userinput>curl \
 --request POST \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 --data-urlencode "privilege.json@entitlement2.json" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege</userinput>
<computeroutput>{"statusCode":201,"body":"Created","statusMessage":"Created"}</computeroutput>
   </programlisting>
  </section>

 <section xml:id="rest-api-policy-management-read">
   <title>Reading Policies (Legacy API)</title>

   <para>
    To read a policy, use an HTTP GET on the endpoint followed by
    the URL-encoded name of the policy.
   </para>

   <para>
    Notice that the "state" is returned as a long string, and so is not
    shown here in full.
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTP</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": {
            "name": "Example HTTP",
            "eSubject": {
                "state": "{\n  \"className\": \"com.sun.identity.policy...}",
                "className": "com.sun.identity.entitlement.opensso.PolicySubject"
            },
            "entitlement": {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "applicationName": "iPlanetAMWebAgentService",
                "name": "authorize",
                "resourceNames": [
                    "http://www.example.com:80/*"
                ]
            }
        }
    },
    "statusMessage": "OK"
}</computeroutput>

$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTPS</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": {
            "name": "Example HTTPS",
            "eSubject": {
                "state": "{\n  \"className\": \"com.sun.identity.policy...}",
                "className": "com.sun.identity.entitlement.opensso.PolicySubject"
            },
            "entitlement": {
                "actionsValues": {
                    "POST": false,
                    "GET": true
                },
                "applicationName": "iPlanetAMWebAgentService",
                "name": "authorize",
                "resourceNames": [
                    "https://www.example.com:443/*?*"
                ]
            }
        }
    },
    "statusMessage": "OK"
}</computeroutput>
   </programlisting>
  </section>

 <section xml:id="rest-api-policy-management-update">
   <title>Updating Policies (Legacy API)</title>

   <para>
    To update a policy, use an HTTP PUT on the endpoint followed by the
    URL-encoded name of the policy.
   </para>

   <programlisting>
$ <userinput>cat update.json</userinput>
<computeroutput>{
    "name": "Example HTTP",
    "eSubject": {
        "state": {
            "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
            "exclusive": false,
            "name": "All Authenticated Users",
            "values": []
        },
        "className": "com.sun.identity.entitlement.opensso.PolicySubject"
    },
    "entitlement": {
        "actionsValues": {
            "POST": false,
            "GET": true
        },
        "applicationName": "iPlanetAMWebAgentService",
        "name": "authorize",
        "resourceNames": [
            "http://www.example.com:80/*?*"
        ]
    }
}</computeroutput>

$ <userinput>curl \
 --request PUT \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 --data-urlencode "privilege.json@update.json" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTP</userinput>
<computeroutput>{"statusCode":200,"body":"OK","statusMessage":"OK"}</computeroutput>
   </programlisting>
  </section>

 <section xml:id="rest-api-policy-management-delete">
   <title>Deleting Policies (Legacy API)</title>

   <para>
    To delete a policy, use an HTTP DELETE on the endpoint followed by
    the URL-encoded name of the policy.
   </para>

   <programlisting>
$ <userinput>curl \
 --request DELETE \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTPS</userinput>
<computeroutput>{"statusCode":200,"body":"OK","statusMessage":"OK"}</computeroutput>
   </programlisting>
  </section>

 <section xml:id="rest-api-policy-management-query">
   <title>Querying Policies (Legacy API)</title>

   <para>
    To get the names of policies, use an HTTP GET on the endpoint.
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            "Example HTTPS",
            "Example HTTP"
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
   </programlisting>

   <para>
    You can pass a filter query parameter to get only policies
    that match the filter. Make sure you URL encode the filter value.
   </para>

   <programlisting>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/privilege\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=&amp;filter=name%3D*HTTP"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            "Example HTTP"
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
   </programlisting>
  </section>

</section>
